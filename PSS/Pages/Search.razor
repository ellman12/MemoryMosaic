@page "/search"

<title>Search - PSS</title>
<link href="css/IndexStarredNoDT.css" rel="stylesheet"/>
<link href="css/Search.css" rel="stylesheet"/>

@{
    <header>
        <button class="iconBtn" @onclick="@lcv.ClearChecks" style="visibility: @headerVis"><span class="material-icons-outlined">close</span></button>
        <span id="selectedAmtText" style="visibility: @headerVis">@selectedItemsCount&nbsp;&nbsp;Selected</span>
        
        <input @ref="@searchInput" id="search" type="text" @bind="@searchText" @bind:event="oninput" @onkeydown="@(e => { if (e.Code is "Enter" or "NumpadEnter") SearchMedia(); })" @onfocusout="@SearchMedia" placeholder="Search for Items by Filename"/>

        <div id="buttons" style="visibility: @headerVis">
            <button class="iconBtn"><span class="material-icons-outlined" @onclick="@lcv.DownloadSelected">file_download</span></button>
            <button class="iconBtn" @onclick="@(() => F.VisToggle(ref collectionsVis))"><span class="material-icons-outlined">collections</span></button>
            <button class="iconBtn" title="Add or Remove Stars From Selected" @onclick="@(() => F.VisToggle(ref lcv.starPromptVis))"><span class="material-icons-outlined">star_outline</span></button>
            <button class="iconBtn" @onclick="@lcv.DeleteBtnClick"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg></button>
        </div>
    </header>
    
    query = String.IsNullOrWhiteSpace(searchText) ? "" : $"SELECT path, date_taken, date_added, starred, uuid, thumbnail, description FROM media WHERE date_deleted IS NULL AND path ILIKE '%{searchText}%' ORDER BY date_taken DESC";
    <LibraryContentViewer @ref="@lcv" @bind-HeaderVis="@headerVis" @bind-SelectedItemsCount="@selectedItemsCount" NotNullDTQueryTop="@query" NotNullDTQueryBottom="@query" FirstQuery="@query" NoItemsText="No Items Found"/>
    
    <CollectionSelector SelectedItem="@lcv.SelectedItem" SelectedItems="@lcv.SelectedItems" @bind-HeaderVis="@headerVis" @bind-CollectionsVis="@collectionsVis"/>
    <KeyboardShortcuts AltC="@(() => { F.VisToggle(ref collectionsVis); StateHasChanged(); })" Slash="FocusSearchInput"/>
}

@code {
    private LibraryContentViewer lcv = new();
    private int selectedItemsCount;
    private ElementReference searchInput;
    private string headerVis = "hidden", collectionsVis = "hidden", searchText = "", query;

    private void SearchMedia()
    {
        query = String.IsNullOrWhiteSpace(searchText) ? "" : $"SELECT path, date_taken, date_added, starred, uuid, thumbnail, description FROM media WHERE date_deleted IS NULL AND path ILIKE '%{searchText}%' ORDER BY date_taken DESC";
        lcv.Reset();
        StateHasChanged();
    }
    
    private async void FocusSearchInput() => await searchInput.FocusAsync();
}