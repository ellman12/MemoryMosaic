@inherits Component

<link href="css/Components/TextInput.css" rel="stylesheet"/>

@* https://stackoverflow.com/a/75706085 *@
@if (Disabled)
{
	<input @ref="@input" type="text" id="@ID" class="@Class" style="font-size: @(FontSize)px; width: @Width; @Style" @bind="@Input" @bind:after="@UpdateInput" @onkeydown="@HandleKeyDown" @onfocusout="@HandleFocusOut" @bind:event="oninput" placeholder="@Placeholder" disabled/>
}
else
{
	<input @ref="@input" type="text" id="@ID" class="@Class" style="font-size: @(FontSize)px; width: @Width; @Style" @bind="@Input" @bind:after="@UpdateInput" @onkeydown="@HandleKeyDown" @onfocusout="@HandleFocusOut" @bind:event="oninput" placeholder="@Placeholder"/>
}

@code {
	[Parameter]
	public string? Input { get; set; }

	[Parameter]
	public EventCallback<string?> InputChanged { get; set; }

	[Parameter]
	public string? Placeholder { get; set; }

	[Parameter]
	public int FontSize { get; set; } = 16;

	[Parameter]
	public string Width { get; set; } = "200px";

	[Parameter]
	public string Style { get; set; } = null!;

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public Action<KeyboardEventArgs>? OnKeyDown { get; set; }

	[Parameter]
	public Action? OnFocusOut { get; set; }

	public async void Focus() => await input.FocusAsync();

	private ElementReference input;

	private async void UpdateInput() => await InputChanged.InvokeAsync(Input);

	private void HandleKeyDown(KeyboardEventArgs e) => OnKeyDown?.Invoke(e);

	private void HandleFocusOut() => OnFocusOut?.Invoke();
}