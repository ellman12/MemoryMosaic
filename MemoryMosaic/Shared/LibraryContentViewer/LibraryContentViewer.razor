@*
Used on a lot of different pages like Home, Starred, CollectionView, Memories, Trash, etc. for displaying items in user's library, optionally grouping items together.
Content is dynamically loaded in small chunks as they scroll up or down the page.
Items can be selected, and depending on the page, different options may be applied to them, such as (un)starring, deleting, changing what collection(s) they are a part of, etc.
*@
@inherits Component

<KeyboardShortcuts CtrlShiftMinus="@(() => Mode--)" CtrlShiftPlus="@(() => Mode++)"/>

<div id="top-load-div"></div>
<main>
	@if (mode == ViewMode.None)
	{
		<div class="ungrouped">
			@foreach (MediaRow item in Content)
			{
				<Thumbnail Item="@item"/>
			}
		</div>
	}
	else
	{
		foreach (var group in Content.GroupBy(SortFunction))
		{
			<div class="group">
				<span>@(group.First().dateTaken == null ? "No Date Taken" : group.First().dateTaken!.Value.ToString(DateFormat))</span>
				<div>
					@foreach (MediaRow item in group)
					{
						<Thumbnail Item="@item"/>
					}
				</div>
			</div>
		}
	}
</main>
<div id="bottom-load-div"></div>

@code {
	private List<MediaRow> Content { get; set; } = null!;

	private ViewMode mode = ViewMode.Day;
	private ViewMode Mode
	{
		get => mode;
		set
		{
			int intValue = (int) value;
			if (intValue is < 0 or > 3) return;
			mode = value;
			StateHasChanged();
		}
	}
	
	private Func<MediaRow, dynamic?> SortFunction => mode switch 
	{
		ViewMode.None => row => row.dateTaken?.Date,
		ViewMode.Day => row => row.dateTaken?.Date,
		ViewMode.Month => row => new {row.dateTaken?.Month, row.dateTaken?.Year},
		ViewMode.Year => row => row.dateTaken?.Year,
		_ => throw new ArgumentOutOfRangeException()
	};
	
	private string DateFormat => mode switch
	{
		ViewMode.None => "",
		ViewMode.Day => "ddd, MMM d, yyyy",
		ViewMode.Month => "MMM yyyy",
		ViewMode.Year => "yyyy",
		_ => throw new ArgumentOutOfRangeException()
	};

	protected override async Task OnInitializedAsync()
	{
		Content = C.LoadEntireMediaTable();
	}
}