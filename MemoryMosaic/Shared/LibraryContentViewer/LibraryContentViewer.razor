@*
Used on a lot of different pages like Home, Starred, CollectionView, Memories, Trash, etc. for displaying items in user's library, optionally grouping items together.
Content is dynamically loaded in small chunks as they scroll up or down the page.
Items can be selected, and depending on the page, different options may be applied to them, such as (un)starring, deleting, changing what collection(s) they are a part of, etc.
*@
@inherits Component

<KeyboardShortcuts CtrlShiftMinus="@(() => ViewMode++)" CtrlShiftPlus="@(() => ViewMode--)"/>

<div id="top-load-div"></div>
<main>
	@if (viewMode == ViewMode.None)
	{
		<div class="ungrouped">
			@foreach (MediaRow item in Content)
			{
				<Thumbnail Item="@item"/>
			}
		</div>
	}
	else
	{
		foreach (var group in Content.GroupBy(SortFunction))
		{
			<div class="group">
				<span>@FormatDateTaken(group.First().dateTaken)</span>
				<div>
					@foreach (MediaRow item in group)
					{
						<Thumbnail Item="@item"/>
					}
				</div>
			</div>
		}
	}
</main>
<div id="bottom-load-div"></div>

@* Optional Parameters *@
@code {
	[Parameter]
	public ViewMode DefaultViewMode { get; set; } = ViewMode.Day; 
}

@code {
	private List<MediaRow> Content { get; set; } = null!;

	private ViewMode viewMode;
	private ViewMode ViewMode
	{
		get => viewMode;
		set
		{
			int intValue = (int) value;
			if (intValue is < 0 or > 3) return;
			viewMode = value;
			StateHasChanged();
		}
	}
	
	private Func<MediaRow, dynamic?> SortFunction => ViewMode switch 
	{
		ViewMode.None => row => row.dateTaken?.Date,
		ViewMode.Day => row => row.dateTaken?.Date,
		ViewMode.Month => row => new {row.dateTaken?.Month, row.dateTaken?.Year},
		ViewMode.Year => row => row.dateTaken?.Year,
		_ => throw new ArgumentOutOfRangeException()
	};
	
	protected override async Task OnInitializedAsync()
	{
		Content = C.LoadEntireMediaTable();
		ViewMode = DefaultViewMode;
	}
}

@functions {
	private string FormatDateTaken(DateTime? dateTaken)
	{
		if (dateTaken == null) return "No Date Taken";
		if (ViewMode == ViewMode.None) return "";

		bool thisYear = dateTaken.Value.Year == DateTime.Now.Year;
		string formatString = ViewMode switch
		{
			ViewMode.Day => thisYear ? "ddd, MMM d" : "ddd, MMM d, yyyy",
			ViewMode.Month => thisYear ? "MMMM" : "MMMM yyyy",
			ViewMode.Year => "yyyy",
			_ => ""
		};

		return dateTaken.Value.ToString(formatString);
	}
}
