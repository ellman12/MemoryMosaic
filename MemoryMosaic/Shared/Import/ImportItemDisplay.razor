@* @using MemoryMosaic.Pages *@
@* @inject IJSRuntime JSRuntime *@

@* <link href="css/Components/Import/ImportItemDisplay.css" rel="stylesheet"/> *@

@* <div class="importItem" @onclick="@(mouseArgs => { if (mouseArgs.CtrlKey) CheckClicked(mouseArgs); })"> *@
	@* <button class="checkBtn" @onclick="@CheckClicked"><span class="material-icons-outlined checkbox @(Import.selectedItems.Contains(ImportItem.Id) ? "checked" : "unchecked")">check_circle</span></button> *@
	
	@* <img src="data:image/jpg;base64,@ImportItem.thumbnail" onclick="window.open('mm_import/@ImportItem.shortPath', '_blank').focus();" alt="" loading="lazy"/> *@
	@* <span class="shortPath @(Import.pathWidthClass == "shortWidth" ? "shortWidth" : "fullWidth")" onclick="openEdit(@Index)">Import/@ImportItem.shortPath</span> *@

	@* <input type="text" @bind="@ImportItem.renamedFilename" style="display: none" id="text @Index"> *@
	@* <button class="iconBtn" id="save @Index" @onclick="@FilenameChanged" style="display: none"><span class="material-icons-outlined">save</span></button> *@
	@* <button class="iconBtn" id="close @Index" onclick="closeEdit(@Index)" style="display: none"><span class="material-icons-outlined">close</span></button> *@

	@* <div onclick="toggleSelect(@Index)" class="dateTakenDisplay"> *@
		@* @if (ImportItem.dateTakenSource == DateTakenSource.Custom) *@
		@* { *@
			@* if (ImportItem.customDateTaken == null) *@
			@* { *@
				@* <span style="color: yellow">C: No Date Taken</span> *@
			@* } *@
			@* else *@
			@* { *@
				@* <span style="color: green;">C:&nbsp;@ImportItem.customDateTaken</span> *@
			@* } *@
		@* } *@
		@* else if (ImportItem.metadataDateTaken == null && ImportItem.filenameDateTaken == null || ImportItem.dateTakenSource == DateTakenSource.None) *@
		@* { *@
			@* <span style="color: yellow">No Date Taken</span> *@
		@* } *@
		@* else if (ImportItem.metadataDateTaken == ImportItem.filenameDateTaken) *@
		@* { *@
			@* <span style="color: green">M:&nbsp;@ImportItem.metadataDateTaken</span> *@
			@* <span style="color: green">F:&nbsp;@ImportItem.filenameDateTaken</span> *@
		@* } *@
		@* else *@
		@* { *@
			@* if (ImportItem.metadataDateTaken != null) *@
			@* { *@
				@* <span>M:&nbsp;@ImportItem.metadataDateTaken</span> *@
			@* } *@
			@* if (ImportItem.filenameDateTaken != null) *@
			@* { *@
				@* <span>F:&nbsp;@ImportItem.filenameDateTaken</span> *@
			@* } *@
		@* } *@
	@* </div> *@

	@* <select id="select @Index" style="display: none" @bind="@ImportItem.dateTakenSource" @bind:after="@DtSourceChanged"> *@
		@* @{ *@
			@* if (ImportItem.metadataDateTaken != null) *@
			@* { *@
				@* <option>Metadata</option> *@
			@* } *@
			@* if (ImportItem.filenameDateTaken != null) *@
			@* { *@
				@* <option>Filename</option> *@
			@* } *@
			@* <option>None</option> *@
			@* <option>Custom</option> *@
		@* } *@
	@* </select> *@

	@* @if (ImportItem.dateTakenSource is DateTakenSource.Metadata or DateTakenSource.Filename && ImportItem.metadataDateTaken?.Year < Import.minYear) *@
	@* { *@
		@* <span class="yearWarn">M Year is less than the min year.</span> *@
	@* } *@
	@* @if (ImportItem.dateTakenSource is DateTakenSource.Metadata or DateTakenSource.Filename && ImportItem.filenameDateTaken?.Year < Import.minYear) *@
	@* { *@
		@* <span class="yearWarn">F Year is less than the min year.</span> *@
	@* } *@
	@* @if (ImportItem.dateTakenSource is DateTakenSource.Metadata or DateTakenSource.Filename && ImportItem.metadataDateTaken?.Year > Import.maxYear) *@
	@* { *@
		@* <span class="yearWarn">M Year is greater than the max year.</span> *@
	@* } *@
	@* @if (ImportItem.dateTakenSource is DateTakenSource.Metadata or DateTakenSource.Filename && ImportItem.filenameDateTaken?.Year > Import.maxYear) *@
	@* { *@
		@* <span class="yearWarn">F Year is greater than the max year.</span> *@
	@* } *@

	@* <input type="datetime-local" title="Choose New Date Taken" @bind="@ImportItem.customDateTaken" @bind:event="oninput" style="display: none" id="dtPicker @Index" step="1"/> $1$ step="1" shows the seconds part. #1# *@

	@* @if (ImportItem.collections != null) *@
	@* { *@
		@* <div class="collectionsDisplay"> *@
			@* @foreach (Collection collection in ImportItem.collections) *@
			@* { *@
				@* <span title="@collection.Id" @onclick="@(() => ImportItem.collections.RemoveWhere(c => c.Id == collection.Id))">@collection.Name</span> *@
			@* } *@
		@* </div> *@
	@* } *@

	@* @if (ImportItem.starred) *@
	@* { *@
		@* <MaterialIcon Icon="star" Class="star-icon"/> *@
	@* } *@
@* </div> *@

@* @code { *@
	@* ///The index of ImportItem in Import.importFiles. *@
	@* [Parameter, EditorRequired] public int Index { get; set; } *@

	@* ///The ImportItem for this ImportItem. *@
	@* [Parameter, EditorRequired] public ImportItem ImportItem { get; set; } = null!; *@
@* } *@

@* @functions { *@
	@* ///Called when the check for an item is clicked, or when an item is clicked and Ctrl is down or there is at least 1 item selected. Toggles that item's check, or multiple items if Shift is held down. *@
	@* private void CheckClicked(MouseEventArgs eventArgs) *@
	@* { *@
		@* ToggleCheck(ImportItem.Id); *@

		@* //Get if Shift was held down when clicking the checkbox. Used for selecting multiple items. *@
		@* if (eventArgs.ShiftKey) *@
		@* { *@
			@* //First item is on left and item shift clicked is on the right. E.g., ###1####2### Loop from 1 --> 2, and add stuff in between to selectedItems. *@
			@* if (Import.lastCheckedIndex < Index) *@
				@* AddSelected(Import.lastCheckedIndex, Index); *@
			@* else if (Import.lastCheckedIndex > Index) //Same as above but swap 1 and 2 and the direction. *@
				@* AddSelected(Index, Import.lastCheckedIndex); *@
		@* } *@
		@* else *@
		@* { *@
			@* Import.lastCheckedIndex = Index; *@
		@* } *@
		@* Import.Rerender(); *@
		
		@* //Modifies a checkmark's CSS class to show if checked/unchecked, and adds/removes the uuid from selectedItems. *@
		@* void ToggleCheck(Guid uuid) *@
		@* { *@
			@* if (Import.selectedItems.Contains(uuid)) *@
				@* Import.selectedItems.Remove(uuid); *@
			@* else Import.selectedItems.Add(uuid); *@
		@* } *@
	
		@* //Add items from start to end into selectedItems. Used for Shift Click. *@
		@* void AddSelected(int startIndex, int endIndex) *@
		@* { *@
			@* for (int i = startIndex; i <= endIndex; i++) *@
			@* { *@
				@* Import.selectedItems.Add(Import.importFiles[i].Id); *@
			@* } *@
		@* } *@
	@* } *@
	
	@* private void FilenameChanged() *@
	@* { *@
		@* const string EMPTY_ERROR_MSG = "Name cannot be empty or whitespace."; *@
		@* const string DUPE_ERROR_MSG = "File with same name in folder."; *@
		@* if (String.IsNullOrWhiteSpace(ImportItem.renamedFilename)) *@
		@* { *@
			@* ImportItem.renamedFilename = EMPTY_ERROR_MSG; *@
			@* return; *@
		@* } *@
		@* if (ImportItem.originalFilename == ImportItem.renamedFilename || ImportItem.renamedFilename is EMPTY_ERROR_MSG or DUPE_ERROR_MSG) *@
		@* { *@
			@* JSRuntime.InvokeAsync<int>("closeEdit", Index); *@
			@* ImportItem.renamedFilename = ImportItem.originalFilename; *@
			@* return; *@
		@* } *@
		
		@* string newShortPath = ImportItem.shortPath.Replace(ImportItem.originalFilename, ImportItem.renamedFilename); *@
		@* string newAbsPath = Path.Join(S.importFolderPath, newShortPath); *@
		
		@* if (File.Exists(newAbsPath)) *@
		@* { *@
			@* ImportItem.renamedFilename = DUPE_ERROR_MSG; *@
		@* } *@
		@* else *@
		@* { *@
			@* File.Move(ImportItem.absolutePath, newAbsPath); *@
			@* JSRuntime.InvokeAsync<int>("closeEdit", Index); *@
			@* ImportItem.originalFilename = ImportItem.renamedFilename; *@
			@* ImportItem.shortPath = newShortPath; *@
			@* ImportItem.absolutePath = newAbsPath; *@
			@* Import.OrganizeItems(); *@
		@* } *@
	@* } *@

	@* private async void DtSourceChanged() *@
	@* { *@
		@* try *@
		@* { *@
			@* if (ImportItem.dateTakenSource == DateTakenSource.Custom) *@
				@* await JSRuntime.InvokeAsync<int>("openDtPicker", Index); *@
			@* else *@
				@* await JSRuntime.InvokeAsync<int>("closeDtPicker", Index); *@
		@* } *@
		@* catch (JSException) {} *@
	@* } *@
@* } *@