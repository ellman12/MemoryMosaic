@implements IDisposable
@using Toolbelt.Blazor.HotKeys
@inject HotKeys HotKeys

@code {
	public void Dispose() => HotKeysContext.Dispose();
	private HotKeysContext HotKeysContext = null!;

	[Parameter]
	public Action? I { get; set; }

	[Parameter]
	public Action? Del { get; set; }

	[Parameter]
	public Action? Esc { get; set; }

	[Parameter]
	public Action? Left { get; set; }

	[Parameter]
	public Action? Right { get; set; }

	[Parameter]
	public Action? CtrlA { get; set; }
	
	[Parameter]
	public Action? CtrlS { get; set; }

	[Parameter]
	public Action? CtrlO { get; set; }

	[Parameter]
	public Action? CtrlD { get; set; }

	[Parameter]
	public Action? CtrlE { get; set; }
	
	[Parameter]
	public Action? CtrlG { get; set; }
	
	[Parameter]
	public Action? CtrlSlash { get; set; }

	[Parameter]
	public Action? AltF { get; set; }

	[Parameter]
	public Action? AltA { get; set; }

	[Parameter]
	public Action? AltC { get; set; }

	[Parameter]
	public Action? AltS { get; set; }

	[Parameter]
	public Action? AltLeft { get; set; }
	
	[Parameter]
	public Action? CtrlLeft { get; set; }
	
	[Parameter]
	public Action? CtrlRight { get; set; }
	
	[Parameter]
	public Action? AltRight { get; set; }
	
	[Parameter]
	public Action? Slash { get; set; }

	protected override void OnInitialized()
	{
		HotKeysContext = HotKeys.CreateContext();
		if (I != null) HotKeysContext.Add(ModKeys.None, Keys.I, I);
		if (Del != null) HotKeysContext.Add(ModKeys.None, Keys.Delete, Del);
		if (Esc != null) HotKeysContext.Add(ModKeys.None, Keys.ESC, Esc);
		if (Left != null) HotKeysContext.Add(ModKeys.None, Keys.Left, Left);
		if (Right != null) HotKeysContext.Add(ModKeys.None, Keys.Right, Right);
		if (CtrlA != null) HotKeysContext.Add(ModKeys.Ctrl, Keys.A, CtrlA);
		if (CtrlS != null) HotKeysContext.Add(ModKeys.Ctrl, Keys.S, CtrlS);
		if (CtrlO != null) HotKeysContext.Add(ModKeys.Ctrl, Keys.O, CtrlO);
		if (CtrlD != null) HotKeysContext.Add(ModKeys.Ctrl, Keys.D, CtrlD);
		if (CtrlE != null) HotKeysContext.Add(ModKeys.Ctrl, Keys.E, CtrlE);
		if (CtrlG != null) HotKeysContext.Add(ModKeys.Ctrl, Keys.G, CtrlG);
		if (CtrlSlash != null) HotKeysContext.Add(ModKeys.Ctrl, Keys.Slash, CtrlSlash);
		if (AltF != null) HotKeysContext.Add(ModKeys.Alt, Keys.F, AltF);
		if (AltA != null) HotKeysContext.Add(ModKeys.Alt, Keys.A, AltA);
		if (AltC != null) HotKeysContext.Add(ModKeys.Alt, Keys.C, AltC);
		if (AltS != null) HotKeysContext.Add(ModKeys.Alt, Keys.S, AltS);
		if (AltLeft != null) HotKeysContext.Add(ModKeys.Alt, Keys.Left, AltLeft);
		if (AltRight != null) HotKeysContext.Add(ModKeys.Alt, Keys.Right, AltRight);
		if (CtrlLeft != null) HotKeysContext.Add(ModKeys.Ctrl, Keys.Left, CtrlLeft);
		if (CtrlRight != null) HotKeysContext.Add(ModKeys.Ctrl, Keys.Right, CtrlRight);
		if (Slash != null) HotKeysContext.Add(ModKeys.None, Keys.Slash, Slash);
	}
	
	public void RegisterHotkey(ModKeys modKeys, Keys key, Action action) => HotKeysContext.Add(modKeys, key, action);
}