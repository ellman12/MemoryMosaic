@inject IJSRuntime JSRuntime
@inherits ToggleableComponent
@typeparam T where T : Media

<div id="fullscreen-viewer" style="display: @(Visibility.Visible ? "flex" : "none")">
	<div id="content">
		<div id="buttons">
			<IconButton Icon="info" OnClick="@infoVisibility.Toggle"/>
			<IconButton Icon="collections"/>
			<IconButton Icon="@(Current.Starred ? "star" : "star_outline")" OnClick="@UpdateStarred"/>
			<IconButton Icon="edit"/>
			<IconButton Icon="restore"/>
			<IconButton Icon="trash"/>
		</div>
		
		<div class="sideButton" @onclick="@MoveLeft">
			<IconButton Icon="arrow_back_ios"/>
		</div>

		<div id="item">
			@if (Current.Video)
			{
				string path = $"{Current.RequestPath}/{Current.Path}";
				<VideoPlayer Path="@path"/>
			}
			else
			{
				<img src="@Current.RequestPath/@Current.Path" alt=""/>
			}
		</div>

		@if (Index < Content.Count - 1)
		{
			<div class="sideButton" @onclick="@MoveRight"><IconButton Icon="arrow_forward_ios"/></div>
		}
	</div>

	<div id="info" class="@(infoVisibility.Visible ? "visible" : "hidden")">
		<span>Info</span>

		@if (Current is LibraryItem current)
		{
			<div title="Date Taken">
				<MaterialIcon Icon="photo_camera"/>
				<span>@FormatDateTaken(current.DateTaken)</span>
				<IconButton Icon="edit"/>
			</div>

			<div title="Date Added">
				<MaterialIcon Icon="cloud_upload"/>
				<span>@FormatDateTaken(current.DateAdded)</span>
			</div>
		}
		
		<div title="@Path.GetFileName(Current.Path)">
			<MaterialIcon Icon="image"/>
			<span>@Path.GetFileName(Current.Path)</span>
			<IconButton Icon="edit"/>
		</div>

		<textarea autocomplete="off" autocorrect="on" spellcheck="true" placeholder="Add a description">@Current.Description</textarea>
	</div>
</div>

@if (!Current.Video)
{
	<KeyboardShortcuts Left="@MoveLeft" Right="@MoveRight"/>
}

<KeyboardShortcuts Esc="@Disable" I="@infoVisibility.Toggle"/>

@code {
	[Parameter, EditorRequired]
	public List<T> Content { get; set; } = null!;

	[Parameter] public ContentLoader? TopLoader { get; set; }
	[Parameter] public ContentLoader? BottomLoader { get; set; }
	
	private T Current => Content[Index];

	private ElementVisibility infoVisibility = new();
	
	private int index;
	public int Index
	{
		get => index;
		set
		{
			if (value < 0 || value > Content.Count) return;
			index = value;
			StateHasChanged();

			if (Current.Video)
				JSRuntime.InvokeVoidAsync("initializeVideo");
		}
	}

	protected override void OnInitialized()
	{
		infoVisibility.Rerender = StateHasChanged;
	}
}

@functions {
	private string FormatDateTaken(DateTime? dateTaken) => dateTaken == null ? "No Date Taken" : dateTaken.Value.ToString("ddd, MMM d, yyyy hh:mm:ss tt");

	private void MoveLeft()
	{
		if (Index == 0 && (bool) TopLoader?.HasMoreRows)
			TopLoader.AddContent();
		
		Index--;
	}

	private void MoveRight()
	{
		if (Index == Content.Count - 1 && (bool) BottomLoader?.HasMoreRows)
			BottomLoader.AddContent();

		Index++;
	}

	private void UpdateStarred()
	{
		C.UpdateStarred(Current.Id, !Current.Starred);
		Current.Starred = !Current.Starred;
		StateHasChanged();
	}
}
