@* Reusable component that allows user to choose album(s) or a folder to add selected item(s) to. *@
@inject IJSRuntime JSRuntime

<link href="/css/components/CollectionSelector.css" rel="stylesheet">

<div id="collectionSelectorBackground" style="visibility: @CollectionsVis">
    <div id="collectionSelector">
        <div id="header">
            <span>Add to</span>
            <div id="buttons">
                <button class="iconBtn" @onclick="@CloseBtnClick"><span class="material-icons-outlined">close</span></button>
                <button class="iconBtn" @onclick="@ConfirmBtnClick"><span class="material-icons-outlined">check</span></button>
            </div>
        </div>
        
        <div id="collectionCreatorDiv"><CollectionCreator @ref="@collectionCreator" Collections="@(albums.Concat(folders).ToList())"/></div>

        <div id="collectionGroups">
            <button class="iconBtn" @onclick="@(() => PreviousSelectionBtnClick(false))" title="Restore the last selection of collections."><span class="material-icons-outlined">history</span></button>
            <button class="iconBtn" @onclick="@(mouseEventArgs => SaveBtnClick(1, mouseEventArgs))" title="Ctrl click to save; click to apply."><span class="material-icons-outlined">save</span></button>
            <button class="iconBtn" @onclick="@(mouseEventArgs => SaveBtnClick(2, mouseEventArgs))" title="Ctrl click to save; click to apply."><span class="material-icons-outlined">save</span></button>
            <button class="iconBtn" @onclick="@(mouseEventArgs => SaveBtnClick(3, mouseEventArgs))" title="Ctrl click to save; click to apply."><span class="material-icons-outlined">save</span></button>
            <button class="iconBtn" @onclick="@(mouseEventArgs => SaveBtnClick(4, mouseEventArgs))" title="Ctrl click to save; click to apply."><span class="material-icons-outlined">save</span></button>
        </div>
        
        <div id="collectionsSearch">
            <input type="text" @bind="@searchText" @bind:event="oninput" placeholder="Search Collections"/>
            <button class="iconBtn" @onclick="@(() => searchText = "")"><span class="material-icons-outlined">clear</span></button>
        </div>
        
        <div id="collections">
            <span>Albums</span>
            <div class="collectionsList">
                @for (int i = 0; i < albums.Count; i++)
                {
                    if (!String.IsNullOrWhiteSpace(searchText) && albums[i].name.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) == -1) continue;
                    
                    int ii = i;
                    <div class="collection" @onclick="@(() => { checkedAlbums[ii] = !checkedAlbums[ii]; ClearFolderChecks(); checkedFolderIndex = -1; })">
                        <div class="coverDiv">
                            @if (albums[i].cover != ""){<img src="@S.LIB_REQUEST_PATH/@albums[i].cover" alt="">}
                        </div>
                        <input type="checkbox" @bind="@checkedAlbums[ii]" @bind:event="oninput">
                        <span title="@albums[i].name">@albums[i].name</span>
                    </div>
                }
            </div>
        
            <span>Folders</span>
            <div class="collectionsList">
                @for (int i = 0; i < folders.Count; i++)
                {
                    if (!String.IsNullOrWhiteSpace(searchText) && folders[i].name.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) == -1) continue;

                    int ii = i;
                    <div class="collection" @onclick="@(() => { checkedFolderIndex = ii; ClearAlbumChecks(); ClearFolderChecks(); checkedFolders[ii] = true; })">
                        <div class="coverDiv">
                            @if (folders[i].cover != ""){<img src="@S.LIB_REQUEST_PATH/@folders[i].cover" alt="">}
                        </div>
                        <input type="checkbox" @bind="@checkedFolders[ii]" @bind:event="oninput">
                        <span title="@folders[i].name">@folders[i].name</span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public static List<Collection> albums;
    public static List<Collection> folders;
    
    public static List<bool> checkedAlbums;
    private static List<bool> checkedFolders;
    public static int checkedFolderIndex; //Which index in folders is checked (can only have 1 checked (true)).

    private string searchText;

    private CollectionCreator collectionCreator;

    [Parameter]
    public Guid SelectedItem { get; set; } = Guid.Empty;
    
    [Parameter]
    public HashSet<Guid> SelectedItems { get; set; } //Passed in from the page. Items selected by user.
    
    [Parameter]
    public EventCallback<int> SelectedItemsCountChanged { get; set; } //Used for clearing SelectedItems. https://blazor-university.com/components/two-way-binding/
    
    [Parameter]
    public string HeaderVis { get; set; } //Passed in from the calling page. Visibility of the header that displays selected items count, misc buttons, etc.
    
    [Parameter]
    public EventCallback<string> HeaderVisChanged { get; set; } //Changing the passed in headerVis.
    
    [Parameter]
    public string CollectionsVis { get; set; } //Visibility of the selector
    
    [Parameter]
    public EventCallback<string> CollectionsVisChanged { get; set; }

    [Parameter]
    public Action OnCheckClicked { get; set; } //Used in Import for overriding the default behavior.

    [Parameter]
    public bool ClearChecksOnConfirm { get; set; } = true;

    protected override void OnInitialized()
    {
        albums = C.GetCollectionsTable(true, false, false);
        folders = C.GetCollectionsTable(false, true, false);
        checkedAlbums = (from album in albums select new bool()).ToList();
        checkedFolders = (from folder in folders select new bool()).ToList();
        checkedFolderIndex = -1; //-1 = a folder isn't picked
        CollectionsVis = "hidden";
        HeaderVis = "hidden";
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) collectionCreator.CollectionCreated += RefreshData;
    }

    private async void RefreshData(object sender, EventArgs e)
    {
        albums = C.GetCollectionsTable(true, false, false);
        folders = C.GetCollectionsTable(false, true, false);
        checkedAlbums = (from album in albums select new bool()).ToList();
        checkedFolders = (from folder in folders select new bool()).ToList();
        checkedFolderIndex = -1; //-1 = a folder isn't picked

        await InvokeAsync(StateHasChanged); //https://stackoverflow.com/questions/56477829/how-to-fix-the-current-thread-is-not-associated-with-the-renderers-synchroniza

        int newestAlbumIndex = albums.FindIndex(a => a.name == collectionCreator.NewCollectionName);
        if (newestAlbumIndex != -1)
        {
            checkedAlbums[newestAlbumIndex] = true;
        }
        else
        {
            int newestFolderIndex = folders.FindIndex(f => f.name == collectionCreator.NewCollectionName);
            if (newestFolderIndex == -1) return;
            checkedFolderIndex = newestFolderIndex;
            checkedFolders[newestFolderIndex] = true;
        }
    }

    //Closing the div for selecting album(s) to add selected items to.
    private async Task CloseBtnClick()
    {
        CollectionsVis = "hidden";
        await CollectionsVisChanged.InvokeAsync("hidden");
        ClearAlbumChecks();
        ClearFolderChecks();
    }
    
    private async Task ClearChecks()
    {
        foreach (Guid item in SelectedItems)
            await JSRuntime.InvokeAsync<string>("removeCheck", item);
        SelectedItems.Clear();
        CollectionsVis = "hidden";
        HeaderVis = "hidden";
        await SelectedItemsCountChanged.InvokeAsync(0);
        await CollectionsVisChanged.InvokeAsync("hidden");
        await HeaderVisChanged.InvokeAsync("hidden");
    }

    private static void ClearAlbumChecks()
    {
        for (int i = 0; i < checkedAlbums.Count; i++) checkedAlbums[i] = false;
    }

    private static void ClearFolderChecks()
    {
        for (int i = 0; i < checkedFolders.Count; i++) checkedFolders[i] = false;
    }

    //Add item(s) to album(s) or folder selected.
    private async void ConfirmBtnClick()
    {
        if (OnCheckClicked != null)
        {
            OnCheckClicked.Invoke();
        }
        else
        {
            if (checkedFolderIndex != -1) //If a folder is selected this won't be -1
            {
                if (SelectedItem != Guid.Empty)
                {
                    await C.AddToCollectionAsync(SelectedItem, folders[checkedFolderIndex].id);
                }
                else
                {
                    foreach (Guid item in SelectedItems)
                        await C.AddToCollectionAsync(item, folders[checkedFolderIndex].id);
                }
            }
            else //Adding to album(s).
            {
                for (int c = 0; c < checkedAlbums.Count; c++)
                {
                    if (checkedAlbums[c] == false) continue;

                    if (SelectedItem != Guid.Empty)
                    {
                        await C.AddToCollectionAsync(SelectedItem, albums[c].id);
                    }
                    else
                    {
                        foreach (Guid item in SelectedItems)
                            await C.AddToCollectionAsync(item, albums[c].id);
                    }
                }
            }
        }

        //Save this selection of albums/folder for next time.
        PreviousSelectionBtnClick(true);

        await CloseBtnClick();

        if (ClearChecksOnConfirm)
        {
            await ClearChecks();
            SelectedItems.Clear();
            await SelectedItemsCountChanged.InvokeAsync(0);
            await CollectionsVisChanged.InvokeAsync("hidden");
            await HeaderVisChanged.InvokeAsync("hidden");
        }
    }

    private void PreviousSelectionBtnClick(bool save)
    {
        MouseEventArgs mouseEventArgs = new() {CtrlKey = save};
        SaveBtnClick(0, mouseEventArgs);
    }

    ///Handles saving and restoring of groups of saved Collections.
    private void SaveBtnClick(int id, MouseEventArgs mouseEventArgs)
    {
        string filePath = Path.Join(Environment.CurrentDirectory, $"slot{id}.tmp");
        if (mouseEventArgs.CtrlKey) //Save/overwrite selection.
        {
            SaveSelectionToDisk();
        }
        else if (File.Exists(filePath)) //Load and apply existing one.
        {
            bool rewrite = false; //If it encountered an ID that no longer exists in DB and it should rewrite the tmp file to remove it/them.
            
            ClearAlbumChecks();
            ClearFolderChecks();
            
            string[] input = File.ReadAllLines(filePath);
            if (input[0] == "F")
            {
                checkedFolderIndex = FindIndex(checkedFolders, folders, input[1]);
                if (checkedFolderIndex == -1) rewrite = true;
                else checkedFolders[checkedFolderIndex] = true;
            }
            else if (input[0] == "A")
            {
                for (int i = 1; i < input.Length; i++)
                {
                    int index = FindIndex(checkedAlbums, albums, input[i]);
                    if (index == -1)
                    {
                        rewrite = true;
                        continue;
                    }
                    checkedAlbums[index] = true;
                }
            }
            
            if (rewrite) SaveSelectionToDisk();
        }
        else
        {
            ClearAlbumChecks();
            ClearFolderChecks();
        }

        void SaveSelectionToDisk()
        {
            if (checkedFolders.Any(b => b))
                File.WriteAllText(filePath, $"F\n{folders[checkedFolderIndex].id}");
            else
            {
                File.WriteAllText(filePath, "A\n");
                for (int i = 0; i < checkedAlbums.Count; i++)
                {
                    if (checkedAlbums[i])
                        File.AppendAllText(filePath, $"{albums[i].id}\n");
                }
            }
        }
        
        //From checkedAlbums or checkedFolders, figure out the index for it in checkedAlbums.
        int FindIndex(List<bool> checkedList, List<Collection> collections, string albumID)
        {
            int parsedID = Int32.Parse(albumID);
            for (int i = 0; i < checkedList.Count; i++)
                if (collections[i].id == parsedID)
                    return i;
            
            return -1;
        }
    }
}