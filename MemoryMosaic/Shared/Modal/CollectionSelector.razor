@* Reusable component that allows user to choose album(s) or a folder to add selected item(s) to. *@
@inherits ToggleableComponent

<link href="css/Components/Modal/CollectionSelector.css" rel="stylesheet"/>

<ModalBackground Visibility="@Visibility">
    <div id="collection-selector">
        <div>
            <span>Add to</span>
            <div>
                <IconButton Icon="close" OnClick="@CloseBtnClick"/>
                <IconButton Icon="check" OnClick="@ConfirmBtnClick"/>
            </div>
        </div>

        <CollectionCreator @ref="@collectionCreator" Collections="@(Albums.Concat(Folders).ToList())" OnCollectionCreate="@SelectNewCollection"/>

        <div id="collection-groups">
            <IconButton Icon="history" OnClick="@(() => PreviousSelectionBtnClick(false))" Title="Restore the last selection of collections."/>

            <div class="hidden-buttons">
                @for (int i = 1; i < 6; i++)
                {
                    int ii = i;
                    <IconButton Icon="save" EventArgsOnClick="@(mouseEventArgs => SaveBtnClick(ii, mouseEventArgs))" Title="Ctrl click to save; click to apply."/>
                }
            </div>
        </div>
        
        <div id="collections-search">
            <TextInput @bind-Input="@searchText" Placeholder="Search Collections"/>
            <IconButton Icon="clear" OnClick="@(() => { searchText = ""; StateHasChanged(); })"/>
        </div>

        <div id="collections">
            <span>Albums</span>
            <div>
                @foreach (var album in Albums)
                {
                    if (!String.IsNullOrWhiteSpace(searchText) && album.Name.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) == -1) continue;
                    
                    <div class="collection" @onclick="@(() => AlbumClicked(album.Id))">
                        <div class="cover">
                            @if (!String.IsNullOrWhiteSpace(album.Cover))
                            {
                                <img src="mm_library/@album.Cover" alt=""/>
                            }
                        </div>
                        <Checkbox Input="@SelectedAlbums.Contains(album.Id)" Label="@album.Name"/>
                    </div>
                }
            </div>

            <span>Folders</span>
            <div>
                @foreach (var folder in Folders)
                {
                    if (!String.IsNullOrWhiteSpace(searchText) && folder.Name.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) == -1) continue;

                    <div class="collection" @onclick="@(() => FolderClicked(folder.Id))">
                        <div class="cover">
                            @if (!String.IsNullOrWhiteSpace(folder.Cover))
                            {
                                <img src="mm_library/@folder.Cover" alt=""/>
                            }
                        </div>
                        <Checkbox Input="@(SelectedFolderId == folder.Id)" Label="@folder.Name"/>
                    </div>
                }
            </div>
        </div>
    </div>
</ModalBackground>

<KeyboardShortcuts AltC="@Toggle"/>

@code {
    public List<Collection> Albums { get; private set; } = null!;
    public List<Collection> Folders { get; private set; } = null!;

    public HashSet<int> SelectedAlbums { get; private set; } = new();
    public int SelectedFolderId { get; private set; } = -1;

    private string? searchText;

    private CollectionCreator collectionCreator = null!;

    [Parameter, EditorRequired]
    public HashSet<Guid> SelectedItems { get; set; } = null!;

    [Parameter]
    public Action? Rerender { get; set; } //Used to rerender LCV after adding items.

    [Parameter]
    public Action? OnCheckClicked { get; set; } //Used in Import for overriding the default behavior.

    public Guid SelectedItem { get; set; } = Guid.Empty; //Used in LCV when viewing a single item.

    protected override void OnInitialized() => RefreshData();

    private void RefreshData()
    {
        Albums = C.GetCollectionsTable(true, false, false);
        Folders = C.GetCollectionsTable(false, true, false);
        SelectedFolderId = -1;
    }

    private void CloseBtnClick()
    {
        Disable();
        ClearCollectionSelection();
    }

    private void ClearSelected()
    {
        SelectedItems.Clear();
        Disable();
        Rerender?.Invoke();
    }

    private void AlbumClicked(int id)
    {
        SelectedFolderId = -1;

        if (SelectedAlbums.Contains(id))
            SelectedAlbums.Remove(id);
        else
            SelectedAlbums.Add(id);
    }

    private void ClearCollectionSelection()
    {
        SelectedAlbums.Clear();
    }

    private void FolderClicked(int id)
    {
        ClearCollectionSelection();
        SelectedFolderId = id;
    }

    ///Selects the new collection that was just created.
    private async void SelectNewCollection()
    {
        RefreshData();

        await InvokeAsync(StateHasChanged); //https://stackoverflow.com/questions/56477829/how-to-fix-the-current-thread-is-not-associated-with-the-renderers-synchroniza

        int newestAlbumIndex = Albums.FindIndex(a => a.Name == collectionCreator.NewCollectionName);
        if (newestAlbumIndex != -1)
        {
            SelectedAlbums.Add(Albums[newestAlbumIndex].Id);
        }
        else
        {
            int newestFolderIndex = Folders.FindIndex(f => f.Name == collectionCreator.NewCollectionName);
            SelectedFolderId = Folders[newestFolderIndex].Id;
        }
    }

    ///Add item(s) to album(s) or folder selected.
    private async void ConfirmBtnClick()
    {
        if (OnCheckClicked != null)
        {
            OnCheckClicked.Invoke();
        }
        else
        {
            if (SelectedFolderId != -1)
            {
                if (SelectedItem != Guid.Empty)
                {
                    await C.AddToCollectionAsync(SelectedFolderId, SelectedItem);
                }
                else
                {
                    foreach (Guid item in SelectedItems)
                        await C.AddToCollectionAsync(SelectedFolderId, item);
                }
            }
            else
            {
                foreach (int id in SelectedAlbums)
                {
                    if (SelectedItem != Guid.Empty)
                    {
                        await C.AddToCollectionAsync(id, SelectedItem);
                    }
                    else
                    {
                        foreach (Guid item in SelectedItems)
                            await C.AddToCollectionAsync(id, item);
                    }
                }
            }
        }

        PreviousSelectionBtnClick(true);

        CloseBtnClick();
    }

    private void PreviousSelectionBtnClick(bool save)
    {
        MouseEventArgs mouseEventArgs = new() {CtrlKey = save};
        SaveBtnClick(0, mouseEventArgs);
    }

    ///Handles saving and restoring of groups of saved Collections.
    private void SaveBtnClick(int id, MouseEventArgs mouseEventArgs)
    {
        string filePath = Path.Join(S.FolderPath, $"slot{id}.tmp");
        if (mouseEventArgs.CtrlKey)
        {
            SaveSelectionToDisk(filePath);
        }
        else if (File.Exists(filePath))
        {
            bool rewrite = false; //If it encountered an ID that no longer exists in DB and it should rewrite the tmp file to remove it/them.

            ClearCollectionSelection();

            string[] lines = File.ReadAllLines(filePath);
            if (lines[0] == "F" && Int32.TryParse(lines[1], out int folderId))
            {
                if (Folders.Any(folder => folder.Id == folderId))
                    SelectedFolderId = folderId;
                else
                    rewrite = true;
            }
            else if (lines[0] == "A")
            {
                foreach (string line in lines.Skip(1))
                {
                    int parsedId = Int32.Parse(line);

                    if (Albums.All(album => album.Id != parsedId))
                        rewrite = true;
                    else
                        SelectedAlbums.Add(parsedId);
                }
            }

            if (rewrite)
                SaveSelectionToDisk(filePath);
        }
        else
        {
            ClearCollectionSelection();
        }
        
        StateHasChanged();
    }

    private void SaveSelectionToDisk(string filePath)
    {
        if (SelectedFolderId != -1)
            File.WriteAllText(filePath, $"F\n{SelectedFolderId}");
        else
        {
            File.WriteAllText(filePath, "A\n");

            foreach (int albumId in SelectedAlbums)
                File.AppendAllText(filePath, $"{albumId}\n");
        }
    }
}