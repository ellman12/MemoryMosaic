@inject IJSRuntime JSRuntime
@inherits ToggleableComponent
@typeparam T where T : Media

<div id="fullscreen-viewer" style="@Visibility.Style">
	<div id="content">
		<IconButton ID="backButton" Icon="arrow_back" OnClick="@Disable"/>
		
		<div id="buttons">
			<IconButton Icon="info" OnClick="@infoVisibility.Toggle"/>
			<IconButton Icon="collections" OnClick="@(() => CollectionSelector.Enable())"/>
			<IconButton Icon="@(Current.Starred ? "star" : "star_outline")" OnClick="@UpdateStarred"/>

			@if (Collection is {ReadOnly: false} && !Current.Video)
			{
				<IconButton Icon="collections_bookmark" OnClick="@(() => D.UpdateCollectionCover(Collection.Id, Current.Path))" Title="Use As Collection Cover"/>
			}

			@if (PageName == "Trash")
			{
				<IconButton Icon="restore" OnClick="@RestoreButtonClick"/>
			}
			
			@if (Import != null && CurrentIi != null)
			{
				<IconButton Icon="library_add" OnClick="@(async () => await Import.AddItem(CurrentIi))" Title="Add Current to Library"/>
			}
			
			<IconButton Icon="trash" OnClick="@DeleteButtonClick"/>
		</div>

		
		@if (Index > 0 || TopLoader is {HasMoreRows: true})
		{
			<div class="sideButton" id="leftBtn" @onclick="@MoveLeft"><IconButton Icon="arrow_back_ios"/></div>
		}

		<div id="item">
			@if (Current.Video && Visible)
			{
				<VideoPlayer Path="@($"{Current.RequestPath}/{Current.Path}")"/>
			}
			else
			{
				<img src="@Current.RequestPath/@Current.Path" alt=""/>
			}
		</div>

		@if (Index < Content.Count - 1 || BottomLoader is {HasMoreRows: true})
		{
			<div class="sideButton" id="rightBtn" @onclick="@MoveRight"><IconButton Icon="arrow_forward_ios"/></div>
		}
	</div>

	<div id="info" class="@(infoVisibility.Visible ? "visible" : "hidden")">
		<span>Info</span>
		
		@if (DisplayItemType)
		{
			<span>@Current.GetType().Name</span>
		}
		
		@if (CurrentLi != null)
		{
			<div class="field" title="@CurrentLi.Filename">
				<MaterialIcon Icon="image"/>
				<span>@CurrentLi.Filename</span>
				<IconButton Icon="edit" OnClick="@fileRename.Enable"/>
			</div>
			
			<div class="field" title="Date Taken">
				<MaterialIcon Icon="photo_camera"/>
				<span>@FormatDateTaken(CurrentLi.DateTaken)</span>
				<IconButton Icon="edit" OnClick="@dtPickerVis.Enable"/>
			</div>

			<div class="field" title="Date Added">
				<MaterialIcon Icon="cloud_upload"/>
				<span>@FormatDateTaken(CurrentLi.DateAdded)</span>
			</div>
			
			if (CurrentLi.DateDeleted != null)
			{
				<div class="field" title="Date Deleted">
					<MaterialIcon Icon="trash"/>
					<span>@FormatDateTaken(CurrentLi.DateDeleted)</span>
				</div>
			}
		}

		@if (CurrentIi != null)
		{
			<div class="field" title="@CurrentIi.NewFilename">
				<MaterialIcon Icon="image"/>
				<span>@CurrentIi.NewFilename</span>
				<IconButton Icon="edit" OnClick="@fileRename.Enable"/>
			</div>
					
			<div class="field" title="Selected Date Taken">
				<MaterialIcon Icon="photo_camera"/>
				<span>@FormatDateTaken(CurrentIi.SelectedDateTaken)</span>
				<IconButton Icon="edit" OnClick="@dtPickerVis.Enable"/>
			</div>
			
			<span>DT Source: @CurrentIi.DateTakenSource</span>
		}

		<div class="field" title="File Size">
			<MaterialIcon Icon="save"/>
			<span>@F.FormatBytes(Current.Size)</span>
		</div>
		
		<textarea autocomplete="off" autocorrect="on" spellcheck="true" placeholder="Add a description" @onfocusout="@UpdateDescription" @bind="@Current.Description">@Current.Description</textarea>

		@if (collectionsContaining?.Count > 0)
		{
			<div id="collectionsContaining">
				<span>Collections Containing</span>
				
				<div>
					@foreach (Collection c in collectionsContaining)
					{
						<a href="/collection/@c.Id">
							<div class="cover">
								@if (!String.IsNullOrWhiteSpace(c.Cover))
								{
									<img src="mm_library/@c.Cover" alt=""/>
								}
							</div>

							<span>@c.Name</span>
						</a>
					}
				</div>
			</div>
		}
	</div>
	
	<ModalBackground Visibility="@dtPickerVis">
		<div id="dt-picker">
			<span>Pick New Date Taken</span>

			<div>
				@if (CurrentLi != null)
				{
					<input type="datetime-local" @bind="@newDateTaken" step="1"/>
					<IconButton Icon="check" OnClick="@(() => { CurrentLi.DateTaken = newDateTaken; dtPickerVis.Disable(); D.UpdateDateTaken(Current.Path, newDateTaken); })"/>
				}
				else if (CurrentIi != null)
				{
					<input type="datetime-local" @bind="@CurrentIi.CustomDateTaken" step="1"/>
					<IconButton Icon="check" OnClick="@(() => { dtPickerVis.Disable(); StateHasChanged(); })"/>
				}

				<IconButton Icon="close" OnClick="@dtPickerVis.Disable"/>
			</div>
		</div>
	</ModalBackground>
	
	<ModalBackground Visibility="@fileRename">
		<div id="fileRename">
			<span>Enter new filename:</span>
			<TextInput @bind-Input="@newFilename" Width="available"/>
			<span style="color: red; display: @(filenameError.Visible ? "inline" : "none")">A file with the same Date Taken and/or name already exists.</span>
			<div>
				<IconButton Icon="check" OnClick="@RenameFile"/>
				<IconButton Icon="close" OnClick="@CancelRenaming"/>
			</div>
		</div>
	</ModalBackground>
</div>

@if (Visible)
{
	<KeyboardShortcuts AltS="@UpdateStarred" AltLeft="@Disable" Del="@DeleteButtonClick" CtrlLeft="@MoveLeft" CtrlRight="@MoveRight" Esc="@Disable" I="@infoVisibility.Toggle" Left="@TryMoveLeft" Right="@TryMoveRight"/>
	<ShortcutsReference Shortcuts="@Shortcuts"/>
}

@code {
	[Parameter, EditorRequired]
	public List<T> Content { get; set; } = null!;

	[Parameter, EditorRequired]
	public CollectionSelector CollectionSelector { get; set; } = null!;

	[Parameter, EditorRequired]
	public Action RerenderParent { get; set; } = null!;

	[Parameter] public ContentLoader? TopLoader { get; set; }
	[Parameter] public ContentLoader? BottomLoader { get; set; }
	
	[Parameter, EditorRequired] public Action? DeleteButtonClick { get; set; }
	[Parameter] public Action? RestoreButtonClick { get; set; }

	[Parameter] public string? PageName { get; set; }
	[Parameter] public bool DisplayItemType { get; set; }
	
	[Parameter] public Collection? Collection { get; set; }
	[Parameter] public MemoryMosaic.Pages.Import.Import? Import { get; set; }
	
	public T Current => Content[Index];
	public LibraryItem? CurrentLi => Current as LibraryItem;
	public ImportItem? CurrentIi => Current as ImportItem;

	private List<Collection>? collectionsContaining;

	private ElementVisibility infoVisibility = new(), dtPickerVis = new(), fileRename = new(), filenameError = new();

	private DateTime? newDateTaken;

	private string? newFilename;
	private string ext = "";
	
	private int index;
	public int Index
	{
		get => index;
		set
		{
			if (value < 0 || value >= Content.Count) return;
			index = value;
			collectionsContaining = D.GetCollectionsContaining(Current.Id);

			if (Current is LibraryItem li)
				newDateTaken = li.DateTaken;

			newFilename = CurrentLi != null ? CurrentLi.FilenameWithoutExtension : CurrentIi!.NewFilename;
			
			ext = P.GetExtension(Current.Path);
			
			StateHasChanged();

			JSRuntime.InvokeVoidAsync(Current.Video ? "initializeVideo" : "cleanupVideo");
		}
	}

	public void Preload(int newIndex)
	{
		if (newIndex < 0 || newIndex >= Content.Count)
			return;
			
		index = newIndex;
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		infoVisibility.Rerender = StateHasChanged;
		Visibility.Rerender = RerenderParent;
		dtPickerVis.Rerender = StateHasChanged;
		fileRename.Rerender = StateHasChanged;
	}
	
	private Dictionary<string, string> Shortcuts
	{
		get
		{
			Dictionary<string, string> shortcuts = new()
			{
				{"Esc", "Close This"},
				{"Alt Left", "Close This"},
				{"Del", "Delete Current Item"},
				{"Alt C", "Toggle CollectionSelector"},
				{"I", "Toggle Info Panel"},
				{"Ctrl Left", "Move Left"},
				{"Ctrl Right", "Move Right"}
			};

			if (Current.Video)
			{
				shortcuts.Add("Space or K", "Play/Pause");
				shortcuts.Add("Left", "Move Left 5 Seconds");
				shortcuts.Add("Right", "Move Right 5 Seconds");
				shortcuts.Add("J", "Move Left 10 Seconds");
				shortcuts.Add("L", "Move Right 10 Seconds");
				shortcuts.Add("Up", "Increase Volume");
				shortcuts.Add("Down", "Decrease Volume");
				shortcuts.Add("F", "Toggle Fullscreen");
				shortcuts.Add("M", "Toggle Mute");
				shortcuts.Add("Home", "Start of Video");
				shortcuts.Add("End", "End of Video");
			}
			else
			{
				shortcuts.Add("Left", "Move Left");
				shortcuts.Add("Right", "Move Right");
			}
			
			return shortcuts;
		}
	}
}

@functions {
	private static string FormatDateTaken(DateTime? dateTaken) => dateTaken == null ? "No Date Taken" : dateTaken.Value.ToString("ddd, MMM d, yyyy hh:mm:ss tt");

	private void UpdateDescription() => D.UpdateDescription(Current.Id, Current.Description);

	private void RenameFile()
	{
		if (String.IsNullOrWhiteSpace(newFilename))
			return;

		string? newShortPath = D.RenameFile(Current.Path, newFilename, ext, (Current as LibraryItem)?.DateTaken);
		if (newShortPath == null)
		{
			fileRename.Enable();
			filenameError.Enable();
		}
		else
		{
			fileRename.Disable();
			filenameError.Disable();
			Current.Path = newShortPath;
		}
	}

	private void CancelRenaming()
	{
		fileRename.Disable();
		filenameError.Disable();
		newFilename = CurrentLi != null ? CurrentLi.FilenameWithoutExtension : CurrentIi!.NewFilename;
	}

	private void MoveLeft()
	{
		if (Index == 0 && TopLoader?.HasMoreRows == true)
			Index += TopLoader.AddContent(100);
		
		Index--;
	}

	private void MoveRight()
	{
		if (Index == Content.Count - 1 && BottomLoader?.HasMoreRows == true)
			BottomLoader.AddContent();

		Index++;
	}

	private void TryMoveLeft()
	{
		if (!Current.Video)
			MoveLeft();
	}

	private void TryMoveRight()
	{
		if (!Current.Video)
			MoveRight();
	}

	private void UpdateStarred()
	{
		D.UpdateStarred(Current.Id, !Current.Starred);
		Current.Starred = !Current.Starred;
		StateHasChanged();
	}
}
