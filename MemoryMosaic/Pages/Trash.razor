@page "/trash"
@inject IJSRuntime JSRuntime

<title>Trash - MemoryMosaic</title>
<link href="css/Trash.css" rel="stylesheet"/>

@{
    <header>
        <button class="iconBtn" id="clearBtn" style="visibility: @(selectedItemsCount == 0 ? "hidden" : "visible")" @onclick="@libContentViewer.ClearChecks"><span class="material-icons-outlined">close</span></button>
        <span id="selectedAmtText" style="visibility: @(selectedItemsCount == 0 ? "hidden" : "visible")">@selectedItemsCount selected</span>
        <div>
            <button class="textBtn" @onclick="@(() => F.VisToggle(ref sortDivVis))"><span class="material-icons-outlined">sort</span><span>@sortBtnText</span></button>
            <button class="textBtn" @onclick="@RestoreBtnClick"><span class="material-icons-outlined">restore_from_trash</span><span>@(selectedItemsCount == 0 ? "Restore ALL" : "Restore Selected")</span></button>
            <button class="textBtn" @onclick="@DeleteBtnClick"><span class="material-icons-outlined">delete_forever</span><span>@(selectedItemsCount == 0 ? "Delete ALL" : "Delete Selected")</span></button>
        </div>
    
        <div id="sortDiv" style="visibility: @sortDivVis">
            <button @onclick="@(() => ChangeOrder(TrashSortMode.NewestDateDeleted))">
                <span class="material-icons-outlined" style="@(sortMode == TrashSortMode.NewestDateDeleted ? "color: #1a73e8" : "visibility: hidden")">check</span>
                <span class="btnText" style="color: @(sortMode == TrashSortMode.NewestDateDeleted ? "#1a73e8" : "white")">Newest Date Deleted First</span>
            </button>
            <button @onclick="@(() => ChangeOrder(TrashSortMode.NewestDateTaken))">
                <span class="material-icons-outlined" style="@(sortMode == TrashSortMode.NewestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span>
                <span class="btnText" style="color: @(sortMode == TrashSortMode.NewestDateTaken ? "#1a73e8" : "white")">Newest Date Taken First</span>
            </button>
            <button @onclick="@(() => ChangeOrder(TrashSortMode.OldestDateDeleted))">
                <span class="material-icons-outlined" style="@(sortMode == TrashSortMode.OldestDateDeleted ? "color: #1a73e8" : "visibility: hidden")">check</span>
                <span class="btnText" style="color: @(sortMode == TrashSortMode.OldestDateDeleted ? "#1a73e8" : "white")">Oldest Date Deleted First</span>
            </button>
            <button @onclick="@(() => ChangeOrder(TrashSortMode.OldestDateTaken))">
                <span class="material-icons-outlined" style="@(sortMode == TrashSortMode.OldestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span>
                <span class="btnText" style="color: @(sortMode == TrashSortMode.OldestDateTaken ? "#1a73e8" : "white")">Oldest Date Taken First</span>
            </button>
        </div>
    </header>

    UpdateQueries();
    @* Date Added in this case is actually Date Deleted. *@
    <LibraryContentViewer @ref="@libContentViewer" UseDateAdded="@(sortMode is TrashSortMode.OldestDateDeleted or TrashSortMode.NewestDateDeleted)" FirstQuery="@firstQuery" NotNullDTQueryTop="@topQuery" NotNullDTQueryBottom="@bottomQuery" SelectedItemsCountChanged="@(() => selectedItemsCount = libContentViewer.SelectedItems.Count)" NoItemsText="No Items in Trash"/>
    
    <TwoChoiceInput @bind-TwoChoiceVis="@delPromptVis" YesBtnClick="@DeleteItems" NoBtnClick="@(() => { delPromptVis = "hidden"; StateHasChanged(); })" Message="@choiceMsg"/>
    <TwoChoiceInput @bind-TwoChoiceVis="@restorePromptVis" YesBtnClick="@RestoreItems" NoBtnClick="@(() => { restorePromptVis = "hidden"; StateHasChanged(); })" Message="@choiceMsg"/>
}

@code {
    private TrashSortMode sortMode = TrashSortMode.NewestDateDeleted;
    private LibraryContentViewer libContentViewer = new();
    private int selectedItemsCount;
    private string sortBtnText, choiceMsg, orderBy, sortColumn, topQuery, bottomQuery, firstQuery;
    private string delPromptVis = "hidden", restorePromptVis = "hidden", sortDivVis = "hidden";

    protected override void OnInitialized() => SetSortBtnText();

    private void SetSortBtnText()
    {
        sortBtnText = sortMode switch
        {
            TrashSortMode.NewestDateDeleted => "Newest Date Deleted",
            TrashSortMode.NewestDateTaken => "Newest Date Taken",
            TrashSortMode.OldestDateDeleted => "Oldest Date Deleted",
            TrashSortMode.OldestDateTaken => "Oldest Date Taken",
            _ => "Newest Date Deleted"
        };
    }

    private void UpdateQueries()
    {
        switch (sortMode)
        {
            case TrashSortMode.NewestDateTaken:
                orderBy = "date_taken DESC";
                sortColumn = "date_taken";
                break;
            
            case TrashSortMode.OldestDateTaken:
                orderBy = "date_taken ASC";
                sortColumn = "date_taken";
                break;
                
            case TrashSortMode.NewestDateDeleted:
                orderBy = "date_deleted DESC";
                sortColumn = "date_deleted";
                break;
                
            case TrashSortMode.OldestDateDeleted:
                orderBy = "date_deleted ASC";
                sortColumn = "date_deleted";
                break;
            default: throw new ArgumentOutOfRangeException();
        }

        const string shared = "SELECT path, date_taken, date_deleted, starred, uuid, thumbnail, description FROM media WHERE date_deleted IS NOT NULL";
        topQuery = $"{shared} AND {sortColumn} {(orderBy.Contains("DESC") ? ">=" : "<=")} @oldestOrNewestDT ORDER BY {orderBy} LIMIT 100";
        bottomQuery = $"{shared} AND {sortColumn} {(orderBy.Contains("DESC") ? "<=" : ">=")} @oldestOrNewestDT ORDER BY {orderBy} LIMIT 100";
    
        //Loads every item with NULL Date Taken first, then items with Date Taken.
        firstQuery = $"({shared} AND date_taken IS NULL ORDER BY {orderBy}) UNION ({shared} AND date_taken IS NOT NULL ORDER BY {orderBy} LIMIT 100) ORDER BY {orderBy}";
    }
    
    private async void ChangeOrder(TrashSortMode newMode)
    {
        sortMode = newMode;
        SetSortBtnText();
        sortDivVis = "hidden";
        await libContentViewer.ClearChecks();
        libContentViewer.oldestDT = libContentViewer.newestDT = null;
        libContentViewer.MediaList.Clear();
        UpdateQueries();
        libContentViewer.AddContentBottom();
        StateHasChanged();
    }

    //Show choice div
    private void RestoreBtnClick()
    {
        if (libContentViewer.MediaList.Count == 0) return;
        if (S.showPrompts == false)
        {
            RestoreItems();
            StateHasChanged();
            return;
        }
        
        restorePromptVis = "visible";
        choiceMsg = libContentViewer.SelectedItems.Count switch
        {
            0 => "Restore Everything?",
            1 => "Restore Selected Item?",
            _ => "Restore Selected Items?"
        };
    }

    private async void RestoreItems()
    {
        if (libContentViewer.SelectedItems.Count == 0) //Restore ALL
        {
            C.RestoreTrash();
            libContentViewer.MediaList.Clear();
        }
        else //Restore selected
        {
            foreach (Guid item in libContentViewer.SelectedItems)
            {
                await JSRuntime.InvokeAsync<string>("removeCheck", item);
                libContentViewer.MediaList.RemoveAll(u => u.uuid == item);
                C.RestoreItem(item);
            }
        }
        await libContentViewer.ClearChecks();
        restorePromptVis = "hidden";
        selectedItemsCount = 0;
        StateHasChanged();
    }

    //Show choice div
    private void DeleteBtnClick()
    {
        if (libContentViewer.MediaList.Count == 0) return;
        if (S.showPrompts == false)
        {
            DeleteItems();
            StateHasChanged();
            return;
        }

        delPromptVis = "visible";
        choiceMsg = libContentViewer.SelectedItems.Count switch
        {
            0 => "PERMANENTLY Delete Everything?",
            1 => "PERMANENTLY Delete Selected Item?",
            _ => "PERMANENTLY Delete Selected Items?"
        };
    }

    private async void DeleteItems()
    {
        if (libContentViewer.SelectedItems.Count == 0) //Delete ALL
        {
            C.EmptyTrash();
            libContentViewer.MediaList.Clear();
        }
        else //Delete selected
        {
            foreach (Guid item in libContentViewer.SelectedItems)
            {
                await JSRuntime.InvokeAsync<string>("removeCheck", item);
                libContentViewer.MediaList.RemoveAll(u => u.uuid == item);
                C.PermDeleteItem(item);
            }
        }
        await libContentViewer.ClearChecks();
        delPromptVis = "hidden";
        selectedItemsCount = 0;
        StateHasChanged();
    }
}