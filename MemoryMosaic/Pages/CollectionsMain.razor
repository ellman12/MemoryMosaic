@* Show all collections and allow user to sort them and make new ones *@
@page "/collections"

<title>Collections - MemoryMosaic</title>
<link href="css/CollectionsMain.css" rel="stylesheet"/>

<header>
    <span id="collectionsText">Collections</span>
    <CollectionCreator @ref="@collectionCreator" Collections="@collections" OnCollectionCreate="@GetCollectionsTable"/>
    
    <div id="checkboxes">
        <div @onclick="@(() => UpdateFilter(out showAlbums, !showAlbums))">
            <input type="checkbox" @bind="@showAlbums">
            <span>Show Albums</span>
        </div>
        <div @onclick="@(() => UpdateFilter(out showFolders, !showFolders))">
            <input type="checkbox" @bind="@showFolders">
            <span>Show Folders</span>
        </div>
        <div @onclick="@(() => UpdateFilter(out showReadonly, !showReadonly))">
            <input type="checkbox" @bind="@showReadonly">
            <span>Show Readonly</span>
        </div>
    </div>

    <TextButton ID="sortBtn" Icon="sort" Text="@sortBtnText" OnClick="@(() => { sortDiv.Toggle(); StateHasChanged(); })"/>
    <div id="sortDiv" style="@sortDiv.Style">
        <button class="textBtn" @onclick="@(() => ChangeOrder(CMSortMode.Title))">
            <span class="material-icons-outlined" style="@(mode == CMSortMode.Title ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span style="color: @(mode == CMSortMode.Title ? "#1a73e8" : "white")">Collection Title</span>
        </button>
        <button class="textBtn" @onclick="@(() => ChangeOrder(CMSortMode.TitleReversed))">
            <span class="material-icons-outlined" style="@(mode == CMSortMode.TitleReversed ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span style="color: @(mode == CMSortMode.TitleReversed ? "#1a73e8" : "white")">Collection Title Reversed</span>
        </button>
        <button class="textBtn" @onclick="@(() => ChangeOrder(CMSortMode.LastModified))">
            <span class="material-icons-outlined" style="@(mode == CMSortMode.LastModified ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span style="color: @(mode == CMSortMode.LastModified ? "#1a73e8" : "white")">Last Modified</span>
        </button>
        <button class="textBtn" @onclick="@(() => ChangeOrder(CMSortMode.LastModifiedReversed))">
            <span class="material-icons-outlined" style="@(mode == CMSortMode.LastModifiedReversed ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span style="color: @(mode == CMSortMode.LastModifiedReversed ? "#1a73e8" : "white")">Last Modified Reversed</span>
        </button>
    </div>
</header>

<div id="mainDiv">
    @foreach (Collection collection in collections)
    { 
        <a class="collection" href="/collection-view/@collection.id"> @*Text and collection thumbnail*@
            <div class="thumbnail">
                @if (collection.cover != ""){<img src="mm_library/@collection.cover" alt=""/>}
            </div>
            <span class="collectionName">@collection.name</span>
        </a>
    }
</div>

@code {
    private List<Collection> collections = null!;

    private CollectionCreator collectionCreator = null!;

    private readonly ElementVisibility sortDiv = new();
    
    private string sortBtnText = null!;
    private static CMSortMode mode = CMSortMode.LastModified;
    private static bool showAlbums = true, showFolders, showReadonly = true;

    protected override void OnInitialized()
    {
        GetCollectionsTable();
        SetSortBtnText();
    }

    private void UpdateFilter(out bool filterToggle, bool newState)
    {
        filterToggle = newState;
        GetCollectionsTable();
    }

    private void GetCollectionsTable()
    {
        collections = C.GetCollectionsTable(showAlbums, showFolders, showReadonly, mode);
        StateHasChanged();
    }

    private void SetSortBtnText()
    {
        sortBtnText = mode switch
        {
            CMSortMode.Title => "Collection Title",
            CMSortMode.TitleReversed => "Title Reversed",
            CMSortMode.LastModified => "Last Modified",
            CMSortMode.LastModifiedReversed => "Last Modified Reversed",
            _ => "Collection Title"
        };
    }

    private void ChangeOrder(CMSortMode newMode)
    {
        mode = newMode;
        GetCollectionsTable();
        SetSortBtnText();
        sortDiv.Disable();
    }
}