@* Show all collections and allow user to sort them and make new ones *@
@page "/collections"

<title>Collections - MemoryMosaic</title>
<link href="css/Pages/CollectionsMain.css" rel="stylesheet"/>

<header>
    <span id="collectionsText">Collections</span>
    <CollectionCreator @ref="@collectionCreator" Collections="@collections" OnCollectionCreate="@GetCollectionsTable"/>
    
    <div id="checkboxes">
        <div @onclick="@(() => UpdateFilter(out showAlbums, !showAlbums))">
            <input type="checkbox" @bind="@showAlbums">
            <span>Show Albums</span>
        </div>
        <div @onclick="@(() => UpdateFilter(out showFolders, !showFolders))">
            <input type="checkbox" @bind="@showFolders">
            <span>Show Folders</span>
        </div>
        <div @onclick="@(() => UpdateFilter(out showReadonly, !showReadonly))">
            <input type="checkbox" @bind="@showReadonly">
            <span>Show Readonly</span>
        </div>
    </div>

    <IconTextButton ID="sortBtn" Icon="sort" Text="@sortBtnText" OnClick="@dropdown.Toggle"/>
</header>

<Dropdown @ref="@dropdown" Positioning="top: 60px; right: 182px">
    <DropdownButton Icon="check" Text="Collection Title" OnClick="@(() => ChangeOrder(CMSortMode.Title))" IconStyle="@(sortMode == CMSortMode.Title ? "color: #1a73e8" : "visibility: hidden")" TextColor="@(sortMode == CMSortMode.Title ? "#1a73e8" : "white")"/>
    <DropdownButton Icon="check" Text="Title Reversed" OnClick="@(() => ChangeOrder(CMSortMode.TitleReversed))" IconStyle="@(sortMode == CMSortMode.TitleReversed ? "color: #1a73e8" : "visibility: hidden")" TextColor="@(sortMode == CMSortMode.TitleReversed ? "#1a73e8" : "white")"/>
    <DropdownButton Icon="check" Text="Last Modified" OnClick="@(() => ChangeOrder(CMSortMode.LastModified))" IconStyle="@(sortMode == CMSortMode.LastModified ? "color: #1a73e8" : "visibility: hidden")" TextColor="@(sortMode == CMSortMode.LastModified ? "#1a73e8" : "white")"/>
    <DropdownButton Icon="check" Text="Last Modified Reversed" OnClick="@(() => ChangeOrder(CMSortMode.LastModifiedReversed))" IconStyle="@(sortMode == CMSortMode.LastModifiedReversed ? "color: #1a73e8" : "visibility: hidden")" TextColor="@(sortMode == CMSortMode.LastModifiedReversed ? "#1a73e8" : "white")"/>
</Dropdown>

<main>
    @foreach (Collection collection in collections)
    {
        <a href="/collection-view/@collection.id">
            <div>
                @if (!String.IsNullOrWhiteSpace(collection.cover))
                {
                    <img src="mm_library/@collection.cover" alt=""/>
                }
            </div>
            <span>@collection.name</span>
        </a>
    }
</main>

@code {
    private List<Collection> collections = null!;

    private CollectionCreator collectionCreator = null!;

    private Dropdown dropdown = new();
    
    private string sortBtnText = null!;
    private static CMSortMode sortMode = CMSortMode.LastModified;
    private static bool showAlbums = true, showFolders, showReadonly = true;

    protected override void OnInitialized()
    {
        GetCollectionsTable();
        SetSortBtnText();
    }

    private void UpdateFilter(out bool filterToggle, bool newState)
    {
        filterToggle = newState;
        GetCollectionsTable();
    }

    private void GetCollectionsTable()
    {
        collections = C.GetCollectionsTable(showAlbums, showFolders, showReadonly, sortMode);
        StateHasChanged();
    }

    private void SetSortBtnText()
    {
        sortBtnText = sortMode switch
        {
            CMSortMode.Title => "Collection Title",
            CMSortMode.TitleReversed => "Title Reversed",
            CMSortMode.LastModified => "Last Modified",
            CMSortMode.LastModifiedReversed => "Last Modified Reversed",
            _ => "Collection Title"
        };
    }

    private void ChangeOrder(CMSortMode newMode)
    {
        sortMode = newMode;
        GetCollectionsTable();
        SetSortBtnText();
        dropdown.Disable();
    }
}