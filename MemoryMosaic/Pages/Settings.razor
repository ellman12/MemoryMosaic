@page "/settings"

<title>Settings - MM</title>
<link href="css/Pages/Settings.css" rel="stylesheet"/>

<div id="body">
    <div>
        <span>Settings</span>
        <div class="text-setting">
            <span>Where to look for items to add to your library</span>
            <TextInput @bind-Input="@ImportFolderPath" Width="available"/>
        </div>

        <div class="text-setting">
            <span>Root path to library folder</span>
            <TextInput @bind-Input="@LibraryRootPath" Width="available"/>
        </div>

        <div class="text-setting">
            <span>Where to backup library and database</span>
            <TextInput @bind-Input="@BackupFolderPath" Width="available"/>
        </div>
        
        <div class="text-setting">
            <span>Where to store temporary items</span>
            <TextInput @bind-Input="@TmpFolderPath" Width="available"/>
        </div>

        <Checkbox @bind-Input="@ShowPrompts" Label="Show Prompts?"/>

        @{
            string color = LogLevel switch
            {
                LogLevel.None => "White",
                LogLevel.Debug => "Green",
                LogLevel.Info => "Cyan",
                LogLevel.Warn => "Yellow",
                LogLevel.Error => "Red",
                _ => throw new ArgumentOutOfRangeException()
            };
        
            <div class="dropdown-setting">
                <span>Log Level</span>
                <select style="color: @color" @bind="@LogLevel">
                    <option>None</option>
                    <option style="color: green">Debug</option>
                    <option style="color: cyan">Info</option>
                    <option style="color: yellow">Warn</option>
                    <option style="color: red">Error</option>
                </select>
            </div>
        }

        <div id="thumbnail-settings">
            @if (!thumbnailProgress.Visible)
            {
                <div id="thumbnail-slider">
                    <span title="Lower the number, higher the quality.">Thumbnail Quality: @ThumbnailQuality</span>
                    <input type="range" step="1" min="1" max="31" @bind="@ThumbnailQuality" @bind:event="oninput" title="Lower the number, higher the quality."/>
                </div>
            }
            
            <div id="thumbnail-updating">
                @if (thumbnailBtn.Visible && !thumbnailProgress.Visible)
                {
                    <IconTextButton Icon="image" Text="Update Thumbnails" OnClick="@UpdateThumbnails"/>
                }

                @if (thumbnailProgress.Visible)
                {
                    <progress max="100" value="@((float) amountUpdated / amountToUpdate * 100)"></progress>
                    <span>@amountUpdated Updated, @(amountToUpdate - amountUpdated) Remaining</span>
                }
            </div>
        </div>

        <IconTextButton Icon="check" Text="Apply" OnClick="@ApplyBtnClicked"/>
        <IconTextButton Icon="close" Text="Cancel" OnClick="@CancelBtnClicked"/>
        <IconTextButton Icon="restart_alt" Text="Reset" OnClick="@ResetBtnClicked"/>
    </div>

    <div>
        <span>Maintenance</span>
        <LinkButton Icon="restore" Text="Backups" Href="maintenance/backups" Title="Create and Restore Backups of MM"/>
        <IconTextButton Icon="restart_alt" Text="Restart Server" OnClick="@RestartServer"/>
        <IconTextButton Icon="folder_delete" Text="Clear mm_tmp" OnClick="@ClearTmpFolder"/>
        <IconTextButton Icon="folder_delete" Text="Free Up Space" OnClick="@FreeUpSpace" Title="Clear mm_tmp and Empty Trash"/>

        @if (!maintenanceLoaded)
        {
            <IconTextButton Icon="build" Text="Run Maintenance Check" OnClick="@RunMaintenanceCheck"/>
        }

        @if (maintenanceLoaded)
        {
            <LinkButton Icon="insert_drive_file" Text="@($"Untracked Files ({untrackedPaths?.Count})")" Href="maintenance/untracked-files" Title="Items in Library Folder but NOT in Database"/>
            <LinkButton Icon="find_in_page" Text="@($"Missing Files ({missingFiles?.Count})")" Href="maintenance/missing-files" Title="Items in Database but the Files Don't Exist"/>
            <IconTextButton Icon="folder" Text="@($"Empty Folders ({emptyFolders?.Count})")" OnClick="@EmptyFoldersBtnClick" Title="Click to Delete All Empty Folders From Library and Import"/>
        }
    </div>
    
    <div id="stats">
        <span>Stats</span>
        @if (!statsLoaded)
        {
            <IconTextButton Icon="insights" Text="Load Stats" OnClick="@GetStats"/>
        }

        @if (statsLoaded)
        {
            <span>@F.GetPluralized(libraryRowCount, "Item", "In Library")</span>
            <span>@F.GetPluralized(trashRowCount, "Item", "In Trash")</span>
            <span>@F.GetPluralized(collectionsCount, "Collection")</span>
            
            <span style="margin-top: 14px">Library Drive Total Size (Usable): @F.FormatBytes(totalUsableDriveSize)</span>
            <span>Library Drive Free Space: @F.FormatBytes(freeDriveSpace)</span>
            <div id="drivePercentage">
                @{
                    double value = Double.Round((double) freeDriveSpace / totalUsableDriveSize * 100, 2);
                    <progress max="100" value="@value"></progress>
                    <span>@value% Available</span>
                }
            </div>
            <span style="margin-bottom: 14px">Library Size: @F.FormatBytes(librarySize)</span>
            
            if (oldestDTItem != null)
            {
                <a target="_blank" href="mm_library/@oldestDTItem.Path">Item with Oldest Date Taken, Taken on @oldestDTItem.DateTaken</a> <!-- https://stackoverflow.com/questions/50709625/link-with-target-blank-and-rel-noopener-noreferrer-still-vulnerable -->
            }
            if (newestDTItem != null)
            {
                <a target="_blank" href="mm_library/@newestDTItem.Path">Item with Newest Date Taken, Taken on @newestDTItem.DateTaken</a>
            }
            if (oldestDAItem != null)
            {
                <a target="_blank" href="mm_library/@oldestDAItem.Path">Item with Oldest Date Added, Added on @oldestDAItem.DateAdded</a>
            }
            if (newestDAItem != null)
            {
                <a style="margin-bottom: 14px" target="_blank" href="mm_library/@newestDAItem.Path">Item with Newest Date Added, Added on @newestDAItem.DateAdded</a>
            }
            <span>Server went online at @whenWentOnline</span>
            <span>Server has been online for @(DateTime.Now - whenWentOnline)</span>
                                                                             
        }
        
        <span>MemoryMosaic Version: @Program.Version</span>
    </div>

    @if (Program.Debug)
    {
        <div>
            <span>Debug</span>
            <div>
                <TextInput @bind-Input="@debugQuery" Placeholder="Enter a query" Width="600px; margin-right: 10px"/>
                <IconTextButton Icon="play_arrow" Text="Run Query" OnClick="@RunQuery"/>
            </div>
        </div>
    }
</div>

@code {
    //Settings
    private string ImportFolderPath = S.ImportFolderPath;
    private string LibraryRootPath = S.LibFolderPath;
    private bool ShowPrompts = S.ShowPrompts;
    private string BackupFolderPath = S.BackupFolderPath;
    private string TmpFolderPath = S.TmpFolderPath;
    private int ThumbnailQuality = S.ThumbnailQuality;
    private LogLevel LogLevel = S.LogLevel;

    //Updating thumbnails
    private int amountToUpdate, amountUpdated;
    private readonly ElementVisibility thumbnailBtn = new(true), thumbnailProgress = new();
    
    //Maintenance
    private bool maintenanceLoaded;
    private List<string>? untrackedPaths;

    //Get all folders in mm_library and mm_import
    private string[]? folderPaths;
    private List<string>? emptyFolders;
    
    //Missing files
    private List<LibraryItem>? missingFiles;
    
    //Stats
    private bool statsLoaded;
    private int libraryRowCount, trashRowCount, collectionsCount;
    private long totalUsableDriveSize; //How much space the drive mm_library is on could have. E.g., on a 1 TB drive it returns ~930 GB. The rest is probably reserved for the OS.
    private long freeDriveSpace; //Bytes
    private long librarySize; //Bytes
    private LibraryItem? oldestDTItem, newestDTItem, oldestDAItem, newestDAItem;
    public static DateTime whenWentOnline;
    
    //Debug
    private string? debugQuery;

    protected override void OnInitialized()
    {
        statsLoaded = false;
        libraryRowCount = trashRowCount = 0;
        collectionsCount = 0;
        totalUsableDriveSize = 0;
        freeDriveSpace = 0;
        librarySize = 0;
    }

    ///Free up space on server by removing temporary files, empty folders, and emptying the trash.
    private void FreeUpSpace()
    {
        ClearTmpFolder();
        EmptyFoldersBtnClick();
        C.EmptyTrash();
    }

    ///Update settings.
    private void ApplyBtnClicked()
    {
        S.ImportFolderPath = ImportFolderPath;
        S.LibFolderPath = LibraryRootPath;
        S.ShowPrompts = ShowPrompts;
        S.BackupFolderPath = BackupFolderPath;
        S.TmpFolderPath = TmpFolderPath;
        S.ThumbnailQuality = ThumbnailQuality;
        S.LogLevel = LogLevel;
        S.WriteSettings();
    }

    ///Cancel modification of settings.
    private void CancelBtnClicked()
    {
        ImportFolderPath = S.ImportFolderPath;
        LibraryRootPath = S.LibFolderPath;
        ShowPrompts = S.ShowPrompts;
        BackupFolderPath = S.BackupFolderPath;
        TmpFolderPath = S.TmpFolderPath;
        ThumbnailQuality = S.ThumbnailQuality;
        LogLevel = S.LogLevel;
    }

    ///Reset settings to default values.
    private void ResetBtnClicked()
    {
        S.ResetSettings();
        CancelBtnClicked();
    }

    private static void RestartServer() => Process.Start("shutdown.exe", "-r -t 0");

    private static void ClearTmpFolder()
    {
        Directory.Delete(S.TmpFolderPath, true);
        Directory.CreateDirectory(S.TmpFolderPath);
    }

    private async void UpdateThumbnails()
    {
        amountUpdated = amountToUpdate = 0;
        thumbnailProgress.Enable();

        List<LibraryItem> allItems = C.GetEntireLibrary().ToList();
        amountToUpdate = allItems.Count;

        await Parallel.ForEachAsync(allItems, async (item, cancellationToken) =>
        {
            await using NpgsqlConnection localConn = await C.CreateLocalConnectionAsync();
            await using NpgsqlCommand cmd = new("UPDATE library SET thumbnail = @newThumbnail WHERE path = @path", localConn);
            cmd.Parameters.AddWithValue("@newThumbnail", F.GenerateThumbnail(item.FullPath));
            cmd.Parameters.AddWithValue("@path", item.Path);
            await cmd.ExecuteNonQueryAsync(cancellationToken);
            amountUpdated++;
            await InvokeAsync(StateHasChanged);
        });

        thumbnailProgress.Disable();
        await InvokeAsync(StateHasChanged);
    }

    //Delete all empty folders
    private void EmptyFoldersBtnClick()
    {
        emptyFolders!.Reverse(); //Start at deepest folder and work up (to avoid dir not found errors).
        foreach (string path in emptyFolders) Directory.Delete(path);
        emptyFolders.Clear();
    }

    private void RunMaintenanceCheck()
    {
        maintenanceLoaded = true;
        emptyFolders = new List<string>();
        untrackedPaths = M.GetUntrackedFiles();
        missingFiles = M.GetMissingFiles();

        folderPaths = Directory.GetDirectories(S.LibFolderPath, "*", SearchOption.AllDirectories).Concat(Directory.GetDirectories(S.ImportFolderPath, "*", SearchOption.AllDirectories)).ToArray();
        foreach (string path in folderPaths)
            if (M.IsFolderEmpty(path) && !emptyFolders.Contains(path)) emptyFolders.Add(path);

        StateHasChanged();
    }

    ///Get various statistics about the server and the library.
    private async void GetStats()
    {
        statsLoaded = true;
        libraryRowCount = Stats.GetNumItemsInLibrary();
        trashRowCount = Stats.GetNumItemsInTrash();
        collectionsCount = Stats.CountCollections();
        
        DriveInfo driveInfo = new(S.LibFolderPath);
        totalUsableDriveSize = driveInfo.TotalSize;
        freeDriveSpace = driveInfo.TotalFreeSpace;
        
        librarySize = new DirectoryInfo(S.LibFolderPath).EnumerateFiles("*", SearchOption.AllDirectories).Sum(file => file.Length);

        oldestDTItem = await Stats.FindItemWithOldestDateTakenAsync();
        newestDTItem = await Stats.FindItemWithNewestDateTakenAsync();
        oldestDAItem = await Stats.FindItemWithOldestDateAddedAsync();
        newestDAItem = await Stats.FindItemWithNewestDateAddedAsync();

        await InvokeAsync(StateHasChanged);
    }

    ///Only for debugging/testing purposes.
    private void RunQuery()
    {
        try
        {
            C.Open();
            NpgsqlCommand cmd = new(debugQuery, C.connection);
            cmd.ExecuteNonQuery();
        }
        catch (NpgsqlException e)
        {
            L.LogException(e);
        }
        finally
        {
            C.Close();
        }
    }
}