@page "/trash"
@inject IJSRuntime JSRuntime

<title>Trash - MemoryMosaic</title>
<link href="css/Trash.css" rel="stylesheet"/>

@{
    <header>
        @if (lcv.SelectedItemsCount > 0)
        {
            <IconButton Icon="close" OnClick="@lcv.ClearChecks"/>
            <span id="selectedAmtText">@lcv.SelectedItemsCount&nbsp;&nbsp;Selected</span>
        }
        <div>
            <TextButton Icon="sort" Text="@sortBtnText" OnClick="@(() => { sortDiv.Toggle(); StateHasChanged(); })"/>
            <TextButton Icon="restore_from_trash" Text="@(lcv.SelectedItemsCount == 0 ? "Restore ALL" : "Restore Selected")" OnClick="@RestoreBtnClick"/>
            <TextButton Icon="delete_forever" Text="@(lcv.SelectedItemsCount == 0 ? "Delete ALL" : "Delete Selected")" OnClick="@DeleteBtnClick"/>
        </div>

        <div id="sortDiv" style="@sortDiv.Style">
            <button @onclick="@(() => ChangeOrder(TrashSortMode.NewestDateDeleted))">
                <span class="material-icons-outlined" style="@(sortMode == TrashSortMode.NewestDateDeleted ? "color: #1a73e8" : "visibility: hidden")">check</span>
                <span class="btnText" style="color: @(sortMode == TrashSortMode.NewestDateDeleted ? "#1a73e8" : "white")">Newest Date Deleted First</span>
            </button>
            <button @onclick="@(() => ChangeOrder(TrashSortMode.NewestDateTaken))">
                <span class="material-icons-outlined" style="@(sortMode == TrashSortMode.NewestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span>
                <span class="btnText" style="color: @(sortMode == TrashSortMode.NewestDateTaken ? "#1a73e8" : "white")">Newest Date Taken First</span>
            </button>
            <button @onclick="@(() => ChangeOrder(TrashSortMode.OldestDateDeleted))">
                <span class="material-icons-outlined" style="@(sortMode == TrashSortMode.OldestDateDeleted ? "color: #1a73e8" : "visibility: hidden")">check</span>
                <span class="btnText" style="color: @(sortMode == TrashSortMode.OldestDateDeleted ? "#1a73e8" : "white")">Oldest Date Deleted First</span>
            </button>
            <button @onclick="@(() => ChangeOrder(TrashSortMode.OldestDateTaken))">
                <span class="material-icons-outlined" style="@(sortMode == TrashSortMode.OldestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span>
                <span class="btnText" style="color: @(sortMode == TrashSortMode.OldestDateTaken ? "#1a73e8" : "white")">Oldest Date Taken First</span>
            </button>
        </div>
    </header>

    UpdateQueries();
    @* Date Added in this case is actually Date Deleted. *@
    <LibraryContentViewer @ref="@lcv" FirstQuery="@firstQuery" NotNullDTQueryTop="@topQuery" NotNullDTQueryBottom="@bottomQuery" NoItemsText="No Items in Trash" Rerender="@StateHasChanged" UseDateAdded="@(sortMode is TrashSortMode.OldestDateDeleted or TrashSortMode.NewestDateDeleted)"/>
    
    <TwoChoiceInput @ref="@delPrompt" YesBtnClick="@DeleteItems" NoBtnClick="@delPrompt.Disable" Message="@choiceMsg"/>
    <TwoChoiceInput @ref="@restorePrompt" YesBtnClick="@RestoreItems" NoBtnClick="@restorePrompt.Disable" Message="@choiceMsg"/>
}

@code {
    private TrashSortMode sortMode = TrashSortMode.NewestDateDeleted;
    private LibraryContentViewer lcv = new();
    private string sortBtnText = null!, choiceMsg = null!, orderBy = null!, sortColumn = null!, topQuery = null!, bottomQuery = null!, firstQuery = null!;
    private readonly ElementVisibility sortDiv = new();
    private TwoChoiceInput delPrompt = new(), restorePrompt = new();

    protected override void OnInitialized() => SetSortBtnText();

    private void SetSortBtnText()
    {
        sortBtnText = sortMode switch
        {
            TrashSortMode.NewestDateDeleted => "Newest Date Deleted",
            TrashSortMode.NewestDateTaken => "Newest Date Taken",
            TrashSortMode.OldestDateDeleted => "Oldest Date Deleted",
            TrashSortMode.OldestDateTaken => "Oldest Date Taken",
            _ => "Newest Date Deleted"
        };
    }

    private void UpdateQueries()
    {
        switch (sortMode)
        {
            case TrashSortMode.NewestDateTaken:
                orderBy = "date_taken DESC";
                sortColumn = "date_taken";
                break;
            
            case TrashSortMode.OldestDateTaken:
                orderBy = "date_taken ASC";
                sortColumn = "date_taken";
                break;
                
            case TrashSortMode.NewestDateDeleted:
                orderBy = "date_deleted DESC";
                sortColumn = "date_deleted";
                break;
                
            case TrashSortMode.OldestDateDeleted:
                orderBy = "date_deleted ASC";
                sortColumn = "date_deleted";
                break;
            default: throw new ArgumentOutOfRangeException();
        }

        const string shared = "SELECT path, date_taken, date_deleted, starred, uuid, thumbnail, description FROM media WHERE date_deleted IS NOT NULL";
        topQuery = $"{shared} AND {sortColumn} {(orderBy.Contains("DESC") ? ">=" : "<=")} @oldestOrNewestDT ORDER BY {orderBy} LIMIT 100";
        bottomQuery = $"{shared} AND {sortColumn} {(orderBy.Contains("DESC") ? "<=" : ">=")} @oldestOrNewestDT ORDER BY {orderBy} LIMIT 100";
    
        //Loads every item with NULL Date Taken first, then items with Date Taken.
        firstQuery = $"({shared} AND date_taken IS NULL ORDER BY {orderBy}) UNION ({shared} AND date_taken IS NOT NULL ORDER BY {orderBy} LIMIT 100) ORDER BY {orderBy}";
    }
    
    private void ChangeOrder(TrashSortMode newMode)
    {
        sortMode = newMode;
        SetSortBtnText();
        sortDiv.Disable();
        lcv.Reset();
        UpdateQueries();
        StateHasChanged();
    }

    //Show choice div
    private void RestoreBtnClick()
    {
        if (S.showPrompts == false)
        {
            RestoreItems();
            StateHasChanged();
            return;
        }
        
        restorePrompt.Enable();
        choiceMsg = lcv.SelectedItems.Count switch
        {
            0 => "Restore Everything?",
            1 => "Restore Selected Item?",
            _ => "Restore Selected Items?"
        };
    }

    private async void RestoreItems()
    {
        if (lcv.SelectedItems.Count == 0) //Restore ALL
        {
            C.RestoreTrash();
            lcv.MediaList.Clear();
        }
        else //Restore selected
        {
            foreach (Guid item in lcv.SelectedItems)
            {
                await JSRuntime.InvokeAsync<string>("removeCheck", item);
                lcv.MediaList.RemoveAll(u => u.uuid == item);
                C.RestoreItem(item);
                await InvokeAsync(StateHasChanged);
            }
        }
        lcv.ClearChecks();
        restorePrompt.Disable();
        await InvokeAsync(StateHasChanged);
    }

    //Show choice div
    private void DeleteBtnClick()
    {
        if (lcv.MediaList.Count == 0) return;
        
        if (S.showPrompts)
        {
            choiceMsg = lcv.SelectedItems.Count switch
            {
                0 => "PERMANENTLY Delete Everything?",
                1 => "PERMANENTLY Delete Selected Item?",
                _ => "PERMANENTLY Delete Selected Items?"
            };
            delPrompt.Enable();
        }
        else
        {
            DeleteItems();
        }
        StateHasChanged();
    }

    private async void DeleteItems()
    {
        if (lcv.SelectedItems.Count == 0)
        {
            C.EmptyTrash();
            lcv.MediaList.Clear();
        }
        else //Delete selected
        {
            foreach (Guid item in lcv.SelectedItems)
            {
                await JSRuntime.InvokeAsync<string>("removeCheck", item);
                lcv.MediaList.RemoveAll(u => u.uuid == item);
                C.PermDeleteItem(item);
                await InvokeAsync(StateHasChanged);
            }
        }
        lcv.ClearChecks();
        delPrompt.Disable();
        await InvokeAsync(StateHasChanged);
    }
}