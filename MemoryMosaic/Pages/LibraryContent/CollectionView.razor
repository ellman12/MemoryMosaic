@page "/collection-view/{CollectionID}"
@inject NavigationManager navigationManager

@if (collection == null) { return; }

<title>@collection.name - MemoryMosaic</title>
<link href="css/CollectionView.css" rel="stylesheet">

@{
    <header>
        <button class="iconBtn" @onclick="@lcv.ClearChecks" style="visibility: @lcv.HeaderVis" id="clearBtn"><span class="material-icons-outlined">close</span></button>
        <span style="visibility: @lcv.HeaderVis" id="selectedAmtText">@lcv.SelectedItemsCount&nbsp;&nbsp;Selected</span>

        <div id="collectionRenameDiv">
            @if (collection.readOnly)
            {
                <input disabled type="text" placeholder="Enter new collection name" @bind="@NewCollectionName" @bind:event="oninput" autocomplete="off"/>
            }
            else
            {
                <input type="text" placeholder="Enter new collection name" @bind="@NewCollectionName" @bind:event="oninput" autocomplete="off"/>
            }

            <span title="@(collection.readOnly ? "Readonly" : "")" class="material-icons-outlined">@(collection.readOnly ? "lock" : "")</span>

            <button class="iconBtn" @onclick="@CancelBtnClick" style="visibility: @buttonsVis">
                <span class="material-icons-outlined">close</span>
            </button>

            <button class="iconBtn" @onclick="@ConfirmBtnClick" style="visibility: @buttonsVis">
                <span class="material-icons-outlined">check</span>
            </button>
        </div>

        <div id="buttons">
            <button class="iconBtn" style="visibility: @lcv.HeaderVis"><span class="material-icons-outlined" @onclick="@lcv.DownloadSelected">file_download</span></button>
            <button class="iconBtn" style="visibility: @lcv.HeaderVis" @onclick="@lcv.cs.Toggle" title="Add Selected to Collection"><span class="material-icons-outlined">library_add</span></button>
            <button class="iconBtn" style="visibility: @lcv.HeaderVis" title="Add or Remove Stars From Selected" @onclick="@(() => F.VisToggle(ref lcv.starPromptVis))"><span class="material-icons-outlined">star_outline</span></button>
            
            @if (!collection.readOnly)
            {
                <button class="iconBtn" style="visibility: @lcv.HeaderVis" @onclick="@RemoveBtnClick" title="Remove Selected"><span class="material-icons-outlined">remove</span></button>
            }
    
            <button class="iconBtn" style="visibility: @lcv.HeaderVis" @onclick="@lcv.DeleteBtnClick" title="Delete Selected"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg></button>
            <button class="iconBtn" @onclick="@(() => F.VisToggle(ref sortDivVis))" title="More Options"><span class="material-icons-outlined">more_vert</span></button>
        </div>

        <div id="moreOptionsDiv" style="visibility: @sortDivVis">
            <button @onclick="@(() => ChangeOrder(CVSortMode.OldestDateTaken))"><span class="material-icons-outlined" style="@(sortMode == CVSortMode.OldestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(sortMode == CVSortMode.OldestDateTaken ? "#1a73e8" : "white")">Oldest Date Taken First</span></button>
            <button @onclick="@(() => ChangeOrder(CVSortMode.NewestDateTaken))"><span class="material-icons-outlined" style="@(sortMode == CVSortMode.NewestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(sortMode == CVSortMode.NewestDateTaken ? "#1a73e8" : "white")">Newest Date Taken First</span></button>
            <button @onclick="@(() => ChangeOrder(CVSortMode.OldestAdded))"><span class="material-icons-outlined" style="@(sortMode == CVSortMode.OldestAdded ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(sortMode == CVSortMode.OldestAdded ? "#1a73e8" : "white")">Oldest Added First</span></button>
            <button @onclick="@(() => ChangeOrder(CVSortMode.NewestAdded))"><span class="material-icons-outlined" style="@(sortMode == CVSortMode.NewestAdded ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(sortMode == CVSortMode.NewestAdded ? "#1a73e8" : "white")">Newest Added First</span></button>
            
            <button @onclick="@ToggleReadonly"><span class="material-icons-outlined">@(collection.readOnly ? "lock_open" : "lock")</span><span>@(collection.readOnly ? "Remove" : "Make") Readonly</span></button>
            
            @if (!collection.readOnly)
            {
                <button @onclick="@(() => C.ChangeCollectionType(collection.id, !collection.folder))"><span class="material-icons-outlined">@(collection.folder ? "perm_media" : "collections")</span><span>@(collection.folder ? "Change to Album" : "Change to Folder")</span></button>
                <button @onclick="@DeleteCollectionBtnClick"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg><span>@(collection.folder ? "Delete Folder" : "Delete Album")</span></button>
            }
        </div>
    </header>
    
    UpdateQueries();

    //Loads every item with NULL Date Taken first, then items with Date Taken.
    <LibraryContentViewer @ref="@lcv" FirstQuery="@firstQuery" NotNullDTQueryTop="@topQuery" NotNullDTQueryBottom="@bottomQuery" NoItemsText="@($"{(collection.folder ? "Folder" : "Album")} is Empty")" Rerender="@StateHasChanged" UseDateAdded="@(sortMode is CVSortMode.OldestAdded or CVSortMode.NewestAdded)"/>
    
    <TwoChoiceInput @bind-TwoChoiceVis="@delPromptVis" Message=@($"PERMANENTLY Delete {(collection.folder ? "Folder" : "Album")} \"{collection.name}\"?")
        YesBtnClick="@(() => { navigationManager.NavigateTo("/collections"); C.DeleteCollection(collection.id); })" NoBtnClick="@(() => { delPromptVis = "hidden"; /* StateHasChanged(); */ })"/>
}

@code{
    [Parameter]
    public string CollectionID { get; set; } = null!;

    private Collection? collection;
    
    private CVSortMode sortMode;
    private string orderBy = null!, sortColumn = null!, topQuery = null!, bottomQuery = null!, firstQuery = null!;
    
    private LibraryContentViewer lcv = new();
    private string delPromptVis = null!, buttonsVis = null!, sortDivVis = null!, _newCollectionName = null!;
    private string NewCollectionName
    {
        get => _newCollectionName;
        set
        {
            if (value == collection!.name) //Same so don't need to reapply
            {
                buttonsVis = "hidden";
            }
            else if (value != collection.name)
            {
                _newCollectionName = value;
                buttonsVis = "visible";
            }
        }
    }
}

@functions{
    protected override async Task OnInitializedAsync()
    {
        collection = await C.GetCollectionDetailsAsync(CollectionID) ?? throw new InvalidOperationException();
        sortMode = CVSortMode.NewestDateTaken;
        _newCollectionName = collection.name;
        delPromptVis = buttonsVis = sortDivVis = "hidden";
    }

    private void UpdateQueries()
    {
        switch (sortMode)
        {
            case CVSortMode.OldestDateTaken:
                orderBy = "date_taken ASC";
                sortColumn = "date_taken";
                break;
            case CVSortMode.NewestDateTaken:
                orderBy = "date_taken DESC";
                sortColumn = "date_taken";
                break;
            case CVSortMode.OldestAdded:
                orderBy = "date_added_to_collection ASC";
                sortColumn = "date_added_to_collection";
                break;
            case CVSortMode.NewestAdded:
                orderBy = "date_added_to_collection DESC";
                sortColumn = "date_added_to_collection";
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    
        string shared = $"SELECT m.path, m.date_taken, a.date_added_to_collection, m.starred, m.uuid, m.thumbnail, m.description FROM media AS m INNER JOIN collection_entries AS a ON m.uuid=a.uuid WHERE collection_id={collection!.id} AND date_deleted IS NULL AND separate={collection.folder}";
        topQuery = $"{shared} AND {sortColumn} {(orderBy.Contains("DESC") ? '>' : '<')} @oldestOrNewestDT ORDER BY {orderBy} LIMIT 100";
        bottomQuery = $"{shared} AND {sortColumn} {(orderBy.Contains("DESC") ? '<' : '>')} @oldestOrNewestDT ORDER BY {orderBy} LIMIT 100";
    
        //Loads every item with NULL Date Taken first, then items with a Date Taken.
        firstQuery = "";
        if (S.displayNoDTInCV) firstQuery = $"({shared} AND date_taken IS NULL ORDER BY {orderBy}) UNION ";
        firstQuery += $"({shared} AND date_taken IS NOT NULL ORDER BY {orderBy} LIMIT 100)";
        if (S.displayNoDTInCV) firstQuery += $" ORDER BY {orderBy}";
    }
    
    private void ChangeOrder(CVSortMode newMode)
    {
        sortMode = newMode;
        sortDivVis = "hidden";
        lcv.Reset();
        UpdateQueries();
        StateHasChanged();
    }

    private async Task ToggleReadonly()
    {
        await C.ToggleReadonlyAsync(collection ?? throw new InvalidOperationException());
        collection.readOnly = !collection.readOnly;
    }

    //Remove selected from the collection
    private void RemoveBtnClick()
    {
        foreach (Guid uuid in lcv.SelectedItems) C.RemoveFromCollection(uuid, collection!.id);
        lcv.Reset();
        StateHasChanged();
    }
    
    private void DeleteCollectionBtnClick()
    {
        if (S.showPrompts == false)
        {
            DeleteCollection();
            return;
        }

        delPromptVis = "visible";
    }
    
    private void DeleteCollection()
    {
        navigationManager.NavigateTo("/collections");
        C.DeleteCollection(collection!.id);
    }
    
    //Functions for collection stuff
    private void CancelBtnClick()
    {
        buttonsVis = "hidden";
        NewCollectionName = collection!.name; //Reset to OG
    }

    private void ConfirmBtnClick()
    {
        buttonsVis = "hidden";
        if (NewCollectionName != "")
            C.RenameCollection(NewCollectionName, collection!.id);
        else
            NewCollectionName = "Please enter a name";
    }
}