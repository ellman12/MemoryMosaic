@page "/starred"

<title>Starred - MemoryMosaic</title>
<link href="css/LibraryContentPage.css" rel="stylesheet"/>

@{
    <header>
        <span id="starredText">Starred</span>
        @if (lcv.Header.Visible)
        {
            <IconButton Icon="close" OnClick="@lcv.ClearChecks"/>
            <span id="selectedAmtText">@lcv.SelectedItemsCount&nbsp;&nbsp;Selected</span>
            <div id="buttons">
                <IconButton Icon="file_download" OnClick="@lcv.DownloadSelected"/>
                <IconButton Icon="collections" OnClick="@lcv.cs.Toggle"/>
                <IconButton Icon="star_outline" OnClick="@(() => lcv.UpdateStars(false))" Title="Remove Stars From Selected"/>
                <IconButton Icon="trash" OnClick="@lcv.DeleteBtnClick"/>
            </div>
        }
    </header>

    const string Shared = "SELECT path, date_taken, date_added, starred, uuid, thumbnail, description FROM media WHERE starred = true AND date_deleted IS NULL AND date_taken";
    const string FirstQuery = $"{Shared} IS NOT NULL ORDER BY date_taken DESC LIMIT 100";
    const string TopQuery = $"{Shared} >= @oldestOrNewestDT ORDER BY date_taken ASC LIMIT 100";
    const string BottomQuery = $"{Shared} <= @oldestOrNewestDT ORDER BY date_taken DESC LIMIT 100";
    <LibraryContentViewer @ref="@lcv" FirstQuery="@FirstQuery" NotNullDTQueryTop="@TopQuery" NotNullDTQueryBottom="@BottomQuery" NoItemsText="Items Marked As Starred and with a Date Taken Appear Here" Rerender="@StateHasChanged"/>
}

@code {
    private LibraryContentViewer lcv = new();
}