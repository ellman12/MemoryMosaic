@page "/maintenance/untracked-files"

<title>Untracked Files â€” Maintenance - MM</title>
<link href="css/maintenance/UntrackedFiles.css" rel="stylesheet">

<header>
    <button class="textBtn" @onclick="@MoveAll">
        <span class="material-icons-outlined">drive_file_move</span><span>Move All to import</span>
    </button>

    <button class="textBtn" @onclick="@DeleteAll">
        <svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24">
            <path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path>
        </svg>
        <span>Delete All</span>
    </button>
</header>

@{
    if (untrackedFiles.Count == 0)
    {
        <h1>No Untracked Items</h1>
        return;
    }
    
    <div id="mainDiv">
        @for (int i = 0; i < untrackedFiles.Count; i++)
        {
            int ii = i;
            string path = untrackedFiles[i];
            string ext = Path.GetExtension(path).ToLower();
            string name = Path.GetFileName(path);

            string shortPath = path.Replace(S.libFolderPath, "").Replace('\\', '/');
            shortPath = Path.GetFileName(S.libFolderPath) + shortPath;

            <div class="itemDiv">
                @if (ext is ".jpg" or ".jpeg" or ".png" or ".gif")
                {
                    <img title="Click for Full Size Preview" onclick="window.open('@shortPath', '_blank').focus();" src="@shortPath" alt="@shortPath" loading="lazy"/>
                }
                else if (ext is ".mp4" or ".mkv" or ".mov")
                {
                    <img title="Click for Full Size Preview" onclick="window.open('@shortPath', '_blank').focus();" src="@("data:image/jpg;base64," + F.GenerateThumbnail(path))" alt="@shortPath" loading="lazy"/>
                }

                <span title="@name" class="filenameSpan">@name</span>

                <button class="iconBtn" title="Move This Item to Import Folder" @onclick="@(() => MoveBtnClick(ii))">
                    <span class="material-icons-outlined">drive_file_move</span>
                </button>

                <button class="iconBtn" title="Delete This Item From Server" @onclick="@(() => DeleteBtnClick(ii))">
                    <svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24">
                        <path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path>
                    </svg>
                </button>
            </div>
        }
    </div>
}

@code {
    private readonly List<string> untrackedFiles = M.GetUntrackedLibFiles();

    ///Move a single item to mm_import.
    private void MoveBtnClick(int index)
    {
        string path = untrackedFiles[index];
        File.Move(path, Path.Combine(S.importFolderPath, Path.GetFileName(path)));
        untrackedFiles.RemoveAt(index);
    }

    ///Move all untracked items from mm_library to mm_import.
    private void MoveAll()
    {
        foreach (string path in untrackedFiles)
            File.Move(path, Path.Combine(S.importFolderPath, Path.GetFileName(path)));
        untrackedFiles.Clear();
    }

    ///Delete this untracked item.
    private void DeleteBtnClick(int index)
    {
        FileSystem.DeleteFile(untrackedFiles[index], UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin);
        untrackedFiles.RemoveAt(index);
    }

    ///Delete all untracked items in mm_library.
    private void DeleteAll()
    {
        foreach (string path in untrackedFiles)
            FileSystem.DeleteFile(path, UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin);
        untrackedFiles.Clear();
    }
}