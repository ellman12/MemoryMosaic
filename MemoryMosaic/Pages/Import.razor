@page "/import"
@using CS = MemoryMosaic.Shared.CollectionSelector;
@using System.Text
@inject IJSRuntime JSRuntime

<title>Import - MemoryMosaic</title>
<link href="css/Import.css" rel="stylesheet">

@{
	if (!finishedLoading)
		return;
	
	if (allAbsPaths.Count is 0)
	{
		<h1>No supported files found in mm_import.</h1>
		return;
	}

	<KeyboardShortcuts AltS="@(() => { pathWidthClass = pathWidthClass == "shortWidth" ? "fullWidth" : "shortWidth"; StateHasChanged(); })" CtrlA="@SelectAll" CtrlS="@SaveChanges" CtrlO="@LoadItemsFromDisk" Del="DeleteSelected" Esc="@ClearChecks" Slash="@FocusSearchInput"/>
	
	<header>
		<button style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")" class="iconBtn" @onclick="@ClearChecks"><span class="material-icons">close</span></button>
		<span style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")">@selectedItems.Count&nbsp;&nbsp;Selected</span>

		<div id="statsDiv">
			<span>@(searchResults.Count > 0 || !String.IsNullOrWhiteSpace(searchText) ? $"{searchResults.Count} Results" : $"{importFiles.Count} Files")</span>
			<span style="visibility: @(errorAmount > 0 ? "visible" : "hidden")" id="errorAmount">@errorAmount Filename Errors</span>
		</div>
		
		@if (errorAmount == 0) {
			string addBtnMsg;
			if (selectedItems.Count == 0 || selectedItems.Count == importFiles.Count) addBtnMsg = "Add All";
			else if (selectedItems.Count == 1) addBtnMsg = "Add 1 Item";
			else addBtnMsg = $"Add {selectedItems.Count} Items";
			<button id="addBtn" class="textBtn" @onclick="@AddItems"><span class="material-icons-outlined">library_add</span><span>@addBtnMsg</span></button>
		}
		
		<input @ref="@searchInput" id="search" type="text" @bind="@searchText" @bind:event="oninput" @onkeydown="@(e => { if (e.Code is "Enter" or "NumpadEnter") SearchItems(); })" @onfocusout="@SearchItems" placeholder="Search original/renamed filenames"/>
		
		<span id="statusMessage">@statusMessage</span>
		
		<div id="yearWarnInputs">
			<input id="yearCheck" type="checkbox" @bind="@yearCheckEnabled"/>
			<label for="yearCheck">Year Check</label>
			
			@if (yearCheckEnabled)
			{
				<input type="text" @bind="@minYear" placeholder="Min Year"/>
				<input type="text" @bind="@maxYear" placeholder="Max Year"/>
			}
		</div>
		
		<div id="buttons" style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")">
			<select @bind="@newDTSource">
				@{
					bool canDisplayMetadata = importFiles.All(file => !selectedItems.Contains(file.uuid) || file.metadataDateTaken != null);
					if (canDisplayMetadata) { <option>Metadata</option> }

					bool canDisplayFilename = importFiles.All(file => !selectedItems.Contains(file.uuid) || file.filenameDateTaken != null);
					if (canDisplayFilename) { <option>Filename</option> }

					<option>None</option>
					<option>Custom</option>
				}
			</select>
			
			<button class="iconBtn" @onclick="@UpdateDateTakenSources" title="Apply"><span class="material-icons-outlined">save</span></button>
			<button class="iconBtn" @onclick="@ToggleStars"><span class="material-icons-outlined">star</span></button>
			<button class="iconBtn" @onclick="@DeleteSelected"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg></button>
		</div>
	</header>
	
	<CollectionSelector OnCheckClicked="@UpdateCollections" SelectedItems="@selectedItems" ClearChecksOnConfirm="false"/>
	
	<div id="mainDiv">
		@for (int i = 0; i < importFiles.Count; i++)
		{
			if (!String.IsNullOrWhiteSpace(searchText) && !searchResults.Contains(importFiles[i].uuid)) continue;
			
			if (i + 1 < importFiles.Count && importFiles[i].originalFilename == importFiles[i + 1].originalFilename && importFiles[i].extension == importFiles[i + 1].extension)
			{
				<div class="itemGroup">
					<div class="errorDiv">
						@do
						{
							<ImportItem Index="i" ImportFile="@importFiles[i]"/>
							i++;
						} while (i < importFiles.Count && importFiles[i - 1].originalFilename == importFiles[i].originalFilename);
						@{ i--; } @* Kind of stupid but fixes a problem where some items could be skipped. *@
						
						@if (libFilesWithSameName.TryGetValue(importFiles[i].originalFilename, out List<MediaRow> sameName))
						{
							foreach (MediaRow mediaRow in sameName)
							{
								<LibraryItem MediaRow="@mediaRow" Rerender="@StateHasChanged"/>
							}
						}
					</div>
					<div class="warnDiv">
						@if (libFilesWithSimilarName.TryGetValue(importFiles[i].originalFilename, out List<MediaRow> similarName))
	                    {
							foreach (MediaRow mediaRow in similarName)
                    		{
                    			<LibraryItem MediaRow="@mediaRow" Rerender="@StateHasChanged"/>
                    		}
	                    }
					</div>
				</div>
			}
			else
			{
				bool hasRendered = false;
				bool hasErrors = libFilesWithSameName.ContainsKey(importFiles[i].originalFilename);
				bool hasWarnings = libFilesWithSimilarName.ContainsKey(importFiles[i].originalFilename);

				if (!hasErrors && !hasWarnings)
				{
					<ImportItem Index="i" ImportFile="@importFiles[i]"/>
					continue;
				}
				
				<div class="itemGroup">
					<div class="errorDiv">
						@if (hasErrors)
						{
							hasRendered = true;
							<ImportItem Index="i" ImportFile="@importFiles[i]"/>

							foreach (MediaRow mediaRow in libFilesWithSameName[importFiles[i].originalFilename])
							{
								<LibraryItem MediaRow="@mediaRow" Rerender="@StateHasChanged"/>
							}
						}
					</div>
					<div class="warnDiv">
						@if (hasWarnings)
						{
							if (!hasRendered)
							{
								<ImportItem Index="i" ImportFile="@importFiles[i]"/>
							}
							
							foreach (MediaRow mediaRow in libFilesWithSimilarName[importFiles[i].originalFilename])
							{
								<LibraryItem MediaRow="@mediaRow" Rerender="@StateHasChanged"/>
							}
						}
					</div>
				</div>
			}
		}
	</div>
}

<ProgressPopUp Message="@popUpMsg" Visible="@addingItems"/>

@code {
	private static ElementReference searchInput;

	private bool finishedLoading, addingItems;

	private string? popUpMsg;

	public static string pathWidthClass = "shortWidth";
	
	///If Import should check the DT year of each item to see if it's outside of a range of valid values.
	private static bool yearCheckEnabled = true;

	///Show a warning if any items have a DT year less than or greater than these values.
	public static int minYear = 2000, maxYear = DateTime.Today.Year;

	///Stores the absolute path of every supported file in mm_import.
	private static List<string> allAbsPaths = null!;

	///List of data about each supported file in mm_import.
	public static List<ImportFile> importFiles = null!;

	private static readonly LazyDictionary<string, List<MediaRow>> libFilesWithSameName = new(), libFilesWithSimilarName = new();

	///If the user does a search, store the results as the uuids of the items.
	private static readonly HashSet<Guid> searchResults = new();

	///Stores what items are selected by the user.
	public static readonly HashSet<Guid> selectedItems = new();

	///Used in ImportItem for rerendering this page.
	public static Action Rerender = null!;

	///When a user checks a checkbox, what is the last one they clicked? Used for shift clicking.
	public static int lastCheckedIndex = 0;

	private static int errorAmount;

	private static string searchText = "", statusMessage = "";

	private DateTakenSource newDTSource = DateTakenSource.None;

	protected override void OnInitialized()
	{
		L.LogLine($"Begin Import {nameof(OnInitialized)}", LogLevel.Info);
		
		allAbsPaths = F.GetSupportedFiles(S.importFolderPath);
		importFiles = new List<ImportFile>(allAbsPaths.Count);
		libFilesWithSameName.Clear();
		libFilesWithSimilarName.Clear();
		searchResults.Clear();
		selectedItems.Clear();
		Rerender = StateHasChanged;

		Parallel.ForEach(allAbsPaths, (absPath, _) =>
		{
			ImportFile importFile = new(absPath);
			importFiles.Add(importFile);
		});

		OrganizeItems();
		finishedLoading = true;
		StateHasChanged();
		
		L.LogLine($"Finish Import {nameof(OnInitialized)}", LogLevel.Info);
	}

	///Organizes the Import items by putting the errors at the top of the page above the other files.
	public static void OrganizeItems()
	{
		L.LogLine($"Begin Import {nameof(OrganizeItems)}", LogLevel.Debug);

		errorAmount = 0;
		List<ImportFile> errors = new(), good = new();
		libFilesWithSameName.Clear();
		libFilesWithSimilarName.Clear();

		importFiles = importFiles.OrderBy(file => file.originalFilename).ToList();
		for (int i = 0; i < importFiles.Count; i++)
		{
			FindLibraryFilesWithSameOrSimilarName(importFiles[i].originalFilename);

			if (i + 1 < importFiles.Count && importFiles[i].originalFilename == importFiles[i + 1].originalFilename && importFiles[i].extension == importFiles[i + 1].extension)
			{
				errorAmount++;
				
				do
				{
					errors.Add(importFiles[i]);
					i++;
				} while (i < importFiles.Count && importFiles[i - 1].originalFilename == importFiles[i].originalFilename && importFiles[i - 1].extension == importFiles[i].extension);
				i--; //Kind of stupid but fixes a problem where some items could be skipped because of the i++.
			}
			else
			{
				good.Add(importFiles[i]);
			}
		}

		// ReSharper disable once ConditionalAccessQualifierIsNonNullableAccordingToAPIContract
		importFiles = errors.Concat(good).OrderByDescending(file => libFilesWithSameName[file.originalFilename]?.Count).ToList();
		L.LogLine($"Finish Import {nameof(OrganizeItems)}", LogLevel.Debug);
	}

	private static void FindLibraryFilesWithSameOrSimilarName(string filenameNoExt)
	{
		C.Open();
		using NpgsqlCommand cmd = new($"SELECT path, date_taken, uuid, thumbnail, date_deleted FROM media WHERE path LIKE '%{filenameNoExt}%' ORDER BY date_taken DESC", C.connection);
		using NpgsqlDataReader r = cmd.ExecuteReader();
		if (!r.HasRows)
		{
			r.Close();
			C.Close();
			return;
		}

		while (r.Read())
		{
			string path = r.GetString(0);
			string thisFilename = Path.GetFileNameWithoutExtension(path);
			MediaRow result = new(path, r.IsDBNull(1) ? null : r.GetDateTime(1), r.GetGuid(2), r.GetString(3), r.IsDBNull(4) ? null : r.GetDateTime(4));
			if (filenameNoExt == thisFilename)
			{
				if (!libFilesWithSameName.ContainsKey(filenameNoExt))
					libFilesWithSameName.Add(filenameNoExt, new List<MediaRow> {result});
				else
					libFilesWithSameName[filenameNoExt].Add(result);
			}
			else
			{
				if (!libFilesWithSimilarName.ContainsKey(filenameNoExt))
					libFilesWithSimilarName.Add(filenameNoExt, new List<MediaRow> {result});
				else
					libFilesWithSimilarName[filenameNoExt].Add(result);
			}
		}
		r.Close();
		C.Close();
	}

	///Adds either all items or the selected items to your library.
	private async void AddItems()
	{
		L.LogLine($"Begin {nameof(AddItems)}", LogLevel.Info);

		if (selectedItems.Count == 0 || selectedItems.Count == importFiles.Count) popUpMsg = "Adding All Items...";
		else if (selectedItems.Count == 1) popUpMsg = "Adding 1 Item...";
		else popUpMsg = $"Adding {selectedItems.Count} Items...";
		
		addingItems = true;
		await InvokeAsync(StateHasChanged);

		List<ImportFile> filesToAdd = selectedItems.Count == 0  || selectedItems.Count == importFiles.Count 
			? importFiles : importFiles.Where(file => selectedItems.Contains(file.uuid)).ToList();
		
		await Parallel.ForEachAsync(filesToAdd, async (file, _) =>
		{
			DateTime? dtToUse = file.dateTakenSource switch
			{
				DateTakenSource.Metadata => file.metadataDateTaken,
				DateTakenSource.Filename => file.filenameDateTaken,
				DateTakenSource.Custom => file.customDateTaken,
				DateTakenSource.None => null,
				_ => throw new ArgumentOutOfRangeException()
			};

			await C.InsertMedia(C.CreateShortPath(dtToUse, file.renamedFilename + file.extension), dtToUse, file.uuid, file.thumbnail, file.starred);
			
			string destFolder = C.CreateFullDateFolderPath(dtToUse);
			Directory.CreateDirectory(destFolder);
			string destPath = C.CreateFullPath(dtToUse, file.originalFilename + file.extension);
			File.Move(file.absolutePath, destPath);
			
			await Task.Run(() => D.UpdateDateTaken(destPath, dtToUse), _);
			
			if (file.collections != null)
				foreach (Collection collection in file.collections)
					await C.AddToCollectionAsync(file.uuid, collection.id);
		});

		if (selectedItems.Count > 0)
		{
			importFiles.RemoveAll(file => selectedItems.Contains(file.uuid));
			ClearChecks();
		}
		else
			importFiles.Clear();
		
		addingItems = false;
		OrganizeItems();
		await InvokeAsync(StateHasChanged);

		L.LogLine($"Finish {nameof(AddItems)}", LogLevel.Info);
	}

	private static void SearchItems()
	{
		searchResults.Clear();
		if (String.IsNullOrWhiteSpace(searchText)) return;
		
		foreach (ImportFile file in importFiles)
		{
			if (file.renamedFilename.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) != -1 || file.originalFilename.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) != -1)
				searchResults.Add(file.uuid);
		}
	}

	private void ClearChecks()
	{
		if (searchResults.Count > 0)
		{
			foreach (Guid uuid in searchResults)
				selectedItems.Remove(uuid);
		}
		else
		{
			selectedItems.Clear();
		}
		StateHasChanged();
	}

	///Either adds all search results to selectedItems, or adds every ImportFile to selectedItems.
	private void SelectAll()
	{
		if (searchResults.Count > 0)
		{
			foreach (Guid uuid in searchResults)
				selectedItems.Add(uuid);
		}
		else
		{
			foreach (ImportFile file in importFiles)
				selectedItems.Add(file.uuid);
		}
		StateHasChanged();
	}

	///Updates the starred field of the selected items. If all have a star, removes stars from all. If some do and don't have a star, adds stars to the ones that don't. If none have a star, adds stars to all of them.
	private static void ToggleStars()
	{
		List<ImportFile> selectedFiles = importFiles.Where(file => selectedItems.Contains(file.uuid)).ToList();
		bool allStarred = selectedFiles.All(file => file.starred);

		foreach (ImportFile importFile in selectedFiles)
			importFile.starred = !allStarred;
	}
	
	///Sends all selected files to the Recycle Bin.
	private void DeleteSelected()
	{
		L.LogLine($"Begin {nameof(DeleteSelected)}", LogLevel.Info);

		foreach (ImportFile file in importFiles.Where(file => selectedItems.Contains(file.uuid)).ToList())
		{
			FileSystem.DeleteFile(file.absolutePath, UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin);
			importFiles.RemoveAll(f => selectedItems.Contains(f.uuid));
		}
		ClearChecks();
		OrganizeItems();
		StateHasChanged();
		
		L.LogLine($"Finish {nameof(DeleteSelected)}", LogLevel.Info);
	}

	///Updates the collections field of each selected ImportItem.
	private static void UpdateCollections()
	{
		foreach (ImportFile file in importFiles.Where(file => selectedItems.Contains(file.uuid)))
		{
			file.collections ??= new HashSet<Collection>();

			if (CS.checkedFolderIndex != -1)
			{
				file.collections.Clear();
				file.collections.Add(CS.folders[CS.checkedFolderIndex]);
			}
			else
			{
				file.collections.RemoveWhere(folder => CS.folders.Contains(folder)); //TODO: there's probably a better/more efficient way to do this.
				
				for (int a = 0; a < CS.checkedAlbums.Count; a++)
				{
					if (CS.checkedAlbums[a] == false) continue;
					file.collections.Add(CS.albums[a]);
				}
			}
		}
	}

	private static async void FocusSearchInput() => await searchInput.FocusAsync();
	
	///Dumps all the data for Import into a .tmp file that can be restored when the page loads.
	private void SaveChanges()
	{
		L.LogLine($"Begin {nameof(SaveChanges)}", LogLevel.Info);

		statusMessage = "Saving...";
		StateHasChanged();

		StringBuilder fileOutput = new();
		string filePath = Path.Join(S.tmpFolderPath, "Import Items.tmp");
		
		foreach (ImportFile file in importFiles)
			fileOutput.AppendLine(file.ToTabDelimitedString());
		
		File.WriteAllText(filePath, fileOutput.ToString());
		statusMessage = $"{importFiles.Count} Items Saved to Disk";
		StateHasChanged();
		
		L.LogLine($"Finish {nameof(SaveChanges)}", LogLevel.Info);
	}

	private void LoadItemsFromDisk()
	{
		L.LogLine($"Begin {nameof(LoadItemsFromDisk)}", LogLevel.Info);
		
		string filePath = Path.Join(S.tmpFolderPath, "Import Items.tmp");
		if (!File.Exists(filePath))
		{
			statusMessage = "No Save File Found";
			StateHasChanged();
			return;
		}
		
		string[] lines = File.ReadAllLines(filePath);
		
		if (lines.Length == 0)
		{
			statusMessage = "No Items Found to Load";
			StateHasChanged();
			return;
		}
		
		importFiles.Clear();
		StateHasChanged(); //IDK why but this is necessary otherwise the code below doesn't work.
		foreach (string line in lines)
		{
			ImportFile newFile = ImportFile.ParseTabDelimitedString(line);
			if (newFile.uuid != Guid.Empty)
				importFiles.Add(newFile);
		}
		OrganizeItems();
		statusMessage = "";
		StateHasChanged();
		
		L.LogLine($"Finish {nameof(LoadItemsFromDisk)}", LogLevel.Info);
	}

	private async void UpdateDateTakenSources()
	{
		for (int i = 0; i < importFiles.Count; i++)
		{
			if (!selectedItems.Contains(importFiles[i].uuid)) continue;

			importFiles[i].dateTakenSource = newDTSource;
			if (newDTSource == DateTakenSource.Custom)
			{
				try { await JSRuntime.InvokeAsync<int>("openDtPicker", i); }
				catch (JSException) {}
  			}
		}
	}
}