@page "/import"
@using System.Text
@using MemoryMosaic.DataStructures
@using System.Collections.Immutable

<title>Import - MemoryMosaic</title>
<link href="css/Pages/Import.css" rel="stylesheet"/>
<link href="css/Components/Import/ImportItemDisplay.css" rel="stylesheet"/>
<link href="css/Components/Import/LibraryItemDisplay.css" rel="stylesheet"/>

<header>
	@if (SelectedItems.Count > 0)
	{
		<IconButton Icon="close" OnClick="@ClearChecks"/>
		<span>@SelectedItems.Count&nbsp;&nbsp;Selected</span>
	}

	@{
		string addBtnMsg;
		if (SelectedItems.Count == 0 || SelectedItems.Count == importItems.Count)
			addBtnMsg = "Add All";
		else if (SelectedItems.Count == 1)
			addBtnMsg = "Add 1 Item";
		else
			addBtnMsg = $"Add {SelectedItems.Count} Items";
		<IconTextButton Icon="library_add" Text="@addBtnMsg" OnClick="@AddItems"/>
	}
</header>

<main>
	@{
		int index = 0;
		foreach (var group in importItems.GroupBy(item => new { item.SelectedDateTaken, item.DestinationPath }))
		{
			ImmutableArray<LibraryItem> existingItems = LibraryCache.Values.Where(libraryItem => group.Any(importItem => importItem.DestinationPath == libraryItem.Path)).ToImmutableArray();

			if (group.Count() > 1 || existingItems.Any())
			{
				<div class="errorDiv">
					@foreach (var importItem in group)
					{
						<ImportItemDisplay Import="@this" ImportItem="@importItem" Index="@index"/>
						index++;
					}
					
					@foreach (var libraryItem in existingItems)
					{
						<LibraryItemDisplay Import="@this" LibraryItem="@libraryItem"/>
					}
				</div>
			}
			else
			{
				<ImportItemDisplay Import="@this" ImportItem="@group.First()" Index="@index"/>
				index++;
			}
		}
	}
</main>

<CollectionSelector @ref="@cs" OnCheckClicked="@UpdateCollections" SelectedItems="@SelectedItems" ClearSelectedOnConfirm="false"/>

@* <FullscreenViewer @ref="@fv" T="@Media" CollectionSelector="@cs" RerenderParent="@StateHasChanged" Content="" DisplayItemType="true"/> *@

<KeyboardShortcuts AltS="@TogglePathWidth" AltD="@ToggleDestinationPaths" Esc="@ClearChecks"/>

@code {
	private CollectionSelector cs = null!;

	private FullscreenViewer<Media> fv = null!;
}

@code {
	public HashSet<Guid> SelectedItems { get; } = new();

	public string PathWidth { get; private set; } = "short";
	public bool DestinationPathsVisible { get; private set; } = false;

	public int LastCheckedIndex { get; set; }

	public int MinYear { get; private set; } = 2000;
	public int MaxYear { get; private set; } = DateTime.Now.Year;

	private bool finishedLoading;

	public Dictionary<string, LibraryItem> LibraryCache { get; private set; } = null!;

	private List<ImportItem> importItems = new();
}

@functions {
	protected override async Task OnInitializedAsync()
	{
		L.LogLine($"Begin Import.{nameof(OnInitialized)}", LogLevel.Info);

		LibraryCache = C.GetEntireLibrary().ToDictionary(key => key.Path, value => value);

		Parallel.ForEach(F.GetSupportedFiles(S.ImportFolderPath), (absPath, _) =>
		{
			ImportItem importFile = new(absPath.Replace('\\', '/'));
			importItems.Add(importFile);
		});

		SortItems();

		L.LogLine($"Finish Import.{nameof(OnInitialized)}", LogLevel.Info);
	}

	public void Rerender() => StateHasChanged();

	private void ClearChecks()
	{
		SelectedItems.Clear();
		Rerender();
	}

	private void TogglePathWidth()
	{
		PathWidth = PathWidth == "short" ? "full" : "short";
		Rerender();
	}

	private void ToggleDestinationPaths()
	{
		DestinationPathsVisible = !DestinationPathsVisible;
		Rerender();
	}
	
	public void ChangeRangeState(int startIndex, int endIndex)
	{
		int increment = startIndex < endIndex ? 1 : -1;

		for (int i = startIndex; i != endIndex + increment; i += increment)
			SelectedItems.Add(importItems[i].Id);

		StateHasChanged();
	}

	private void SortItems()
	{
		importItems = importItems.OrderByDescending(item => LibraryCache.Count(libItem => P.GetFileName(libItem.Key).Contains(item.Filename)))
			.ThenBy(item => item.Filename)
			.ToList();
	}

	private async void AddItems()
	{
		IEnumerable<ImportItem> items = SelectedItems.Count == 0 || SelectedItems.Count == importItems.Count ? importItems : importItems.Where(item => SelectedItems.Contains(item.Id));

		await Parallel.ForEachAsync(items, async (item, cancellationToken) =>
		{
			await C.InsertItem(item);

			if (item.Collections != null)
			{
				foreach (var collection in item.Collections)
					await C.AddToCollectionAsync(collection.Id, item.Id);
			}
			
			await Task.Run(() =>
			{
				Directory.CreateDirectory(C.CreateFullDateFolderPath(item.SelectedDateTaken));
				File.Move(item.AbsolutePath, item.AbsoluteDestinationPath);
				D.UpdateDateTaken(item.AbsoluteDestinationPath, item.SelectedDateTaken);
			}, cancellationToken);
		});
		
		if (SelectedItems.Count > 0)
            importItems.RemoveAll(file => SelectedItems.Contains(file.Id));
        else
			importItems.Clear();

        ClearChecks();
	}
	
	private void UpdateCollections()
	{
		foreach (ImportItem item in importItems.Where(item => SelectedItems.Contains(item.Id)))
		{
			item.Collections ??= new HashSet<Collection>();

			if (cs.SelectedFolderId != -1)
			{
				item.Collections.Clear();
				item.Collections.Add(cs.Folders.Find(folder => folder.Id == cs.SelectedFolderId) ?? throw new NullReferenceException());
			}
			else
			{
				item.Collections.RemoveWhere(folder => cs.Folders.Contains(folder));
				item.Collections.UnionWith(cs.Albums.Where(album => cs.SelectedAlbums.Contains(album.Id)));
			}
		}

		StateHasChanged();
	}
}