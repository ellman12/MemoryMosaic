@page "/import"
@using System.Text
@using MemoryMosaic.DataStructures

<title>Import - MemoryMosaic</title>
<link href="css/Pages/Import.css" rel="stylesheet"/>
<link href="css/Components/Import/ImportItemDisplay.css" rel="stylesheet"/>

<header>
	@if (SelectedItems.Count > 0)
	{
		<IconButton Icon="close" OnClick="@ClearChecks"/>
		<span>@SelectedItems.Count&nbsp;&nbsp;Selected</span>
	}
</header>

<main>
	@for (int i = 0; i < importItems.Count; i++)
	{
		<ImportItemDisplay Import="@this" ImportItem="@importItems[i]" Index="@i"/>
	}
</main>

@* <CollectionSelector @ref="@cs" SelectedItems="@SelectedItems" ClearSelectedOnConfirm="false"/> *@

@* <FullscreenViewer @ref="@fv" T="@Media" CollectionSelector="@cs" RerenderParent="@StateHasChanged" Content="" DisplayItemType="true"/> *@

<KeyboardShortcuts AltS="@TogglePathWidth" Esc="@ClearChecks"/>

@code {
	private CollectionSelector cs = null!;

	private FullscreenViewer<Media> fv = null!;
}

@code {
	public HashSet<Guid> SelectedItems { get; private set; } = new();

	public string PathWidth { get; private set; } = "short";

	public int LastCheckedIndex { get; set; }

	public int MinYear { get; private set; } = 2000;
	public int MaxYear { get; private set; } = DateTime.Now.Year;

	private bool finishedLoading;

	private List<LibraryItem> libraryCache = null!, filesWithSameName = new(), filesWithSimilarName = new();

	private readonly List<ImportItem> importItems = new();
}

@functions {
	protected override async Task OnInitializedAsync()
	{
		L.LogLine($"Begin Import.{nameof(OnInitialized)}", LogLevel.Info);

		Parallel.ForEach(F.GetSupportedFiles(S.ImportFolderPath), (absPath, _) =>
		{
			ImportItem importFile = new(absPath.Replace('\\', '/'));
			importItems.Add(importFile);
		});

		L.LogLine($"Finish Import.{nameof(OnInitialized)}", LogLevel.Info);
	}

	public void Rerender() => StateHasChanged();

	private void ClearChecks()
	{
		SelectedItems.Clear();
		Rerender();
	}

	private void TogglePathWidth()
	{
		PathWidth = PathWidth == "short" ? "full" : "short";
		Rerender();
	}
	
	public void ChangeRangeState(int startIndex, int endIndex)
	{
		int increment = startIndex < endIndex ? 1 : -1;

		for (int i = startIndex; i != endIndex + increment; i += increment)
			SelectedItems.Add(importItems[i].Id);

		StateHasChanged();
	}
}