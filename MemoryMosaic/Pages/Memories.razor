@* @page "/memories" *@
@* *@
@* <link rel="stylesheet" href="css/Components/ViewItem.css"/> *@
@* <link rel="stylesheet" href="css/Pages/Memories.css"/> *@
@* *@
@* <title>Memories - MM</title> *@
@* *@
@* <header> *@
@*     <span>Memories From</span> *@
@* *@
@*     <select name="months" id="months" autocomplete="on" @bind="@SelectedMonth"> *@
@*         @foreach (string month in months) *@
@*         { *@
@*             <option value="@month">@month</option> *@
@*         } *@
@*     </select> *@
@* *@
@* 	<IntInput @bind-Input="@SelectedDay" Width="40px"/> *@
@* 	 *@
@* 	<IconButton ID="randomBtn" Icon="shuffle" OnClick="@PickRandomDate" Title="Pick Random Date"/> *@
@* </header> *@
@* *@
@* @{ *@
@*     if (MediaList.Count == 0) *@
@*     { *@
@*         <h1>No items were taken on this day</h1> *@
@*         return; *@
@*     } *@
@*      *@
@*     $1$ Display a single item in full screen, and allow moving left/right in the List. #1# *@
@* 	<div id="viewDiv" style="visibility: @(SelectedItem == Guid.Empty ? "hidden" : "visible")"> *@
@* 		<div id="buttons"> *@
@* 			<IconButton Icon="info" OnClick="@info.Toggle" Title="Show Info"/> *@
@* 			<IconButton Icon="trash" OnClick="@DeleteBtnClick"/> *@
@* 			<IconButton Icon="@(MediaList[viewIndex].starred ? "star" : "star_outline")" OnClick="@StarBtnClick" Title="@(MediaList[viewIndex].starred ? "Remove Star" : "Add Star")"/> *@
@* 		</div> *@
@* *@
@* 		<div id="infoDiv" style="@info.Style"> *@
@* 			<div id="itemInfo"> *@
@* 				<div class="dataDiv" title="Date Taken"> *@
@* 					<svg width="24px" height="24px" class="v1262d JUQOtc Y0p3Ue" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM9 9.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"></path></svg> *@
@* 					<span>@(MediaList[viewIndex].dateTaken == null ? "No Date Taken" : MediaList[viewIndex].dateTaken?.ToString("ddd, MMM d, yyyy h:mm:ss tt"))</span> *@
@* 					<IconButton Icon="edit" OnClick="@dateEdit.Enable"/> *@
@* 				</div> *@
@* *@
@* 				<div class="dataDiv" title="Date Added"> *@
@* 					<svg width="24px" height="24px" class="v1262d JUQOtc Y0p3Ue" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM9 9.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"></path></svg> *@
@* 					<span>@MediaList[viewIndex].dateAdded.ToString("ddd, MMM d, yyyy h:mm:ss tt")</span> *@
@* 				</div> *@
@* *@
@* 				<div class="dataDiv"> *@
@* 					<svg width="24px" height="24px" class="v1262d JUQOtc Y0p3Ue" viewBox="0 0 24 24"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14zm-5-7l-3 3.72L9 13l-3 4h12l-4-5z"></path></svg> *@
@* 					<span id="filenameInput">@Path.GetFileName(MediaList[viewIndex].path)</span> *@
@* 					<IconButton Icon="edit" OnClick="@editFilename.Enable"/> *@
@* 				</div> *@
@* *@
@* 				<textarea @bind="@itemDescription" @onfocusout="@UpdateDescription" autocomplete="off" autocorrect="on" placeholder="Enter a description for this item." spellcheck="true"></textarea> *@
@* 			</div> *@
@* *@
@* 			@if (collectionsIn?.Count > 0) *@
@* 			{ *@
@* 				<div id="collectionsInfo"> *@
@* 					<span id="collectionsText">Collections Containing</span> *@
@* 					<div id="collectionsIn"> *@
@* 						@foreach (Collection collection in collectionsIn) *@
@* 						{ *@
@* 							<a href="/collection-view/@collection.Id"> *@
@* 								<div class="collection"> *@
@* 									<div class="coverDiv"> *@
@* 										<img class="cover" src="mm_library/@collection.Cover" alt=""> *@
@* 									</div> *@
@* 									<span title="@collection.Name">@collection.Name</span> *@
@* 								</div> *@
@* 							</a> *@
@* 						} *@
@* 					</div> *@
@* 				</div> *@
@* 			} *@
@* 		</div> *@
@* *@
@* 		<div class="inputBox" style="@dateEdit.Style"> *@
@* 		    <span>Enter new date taken:</span> *@
@* 		    <input title="" type="datetime-local" @bind="@newDateTaken" step="1"/> *@
@* 		    <span class="errorSpan" style="visibility: @dtError">Error Changing Date Taken</span> *@
@* 		    <div> *@
@* 		        <IconButton Icon="close" OnClick="@dateEdit.Disable"/> *@
@* 		        <IconButton Icon="check" OnClick="@UpdateDateTaken"/> *@
@* 		    </div> *@
@* 		</div> *@
@* *@
@* 		<div class="inputBox" style="@editFilename.Style"> *@
@* 		    <span>Enter new filename:</span> *@
@* 			<TextInput @bind-Input="@newFilename"/> *@
@* 		    <span class="errorSpan" style="@filenameError.Style">A file with the same Date Taken and/or name already exists.</span> *@
@* 		    <div> *@
@* 		        <IconButton Icon="close" OnClick="@(() => { editFilename.Disable(); filenameError.Disable(); newFilename = ""; })"/> *@
@* 		        <IconButton Icon="check" OnClick="@RenameFile"/> *@
@* 		    </div> *@
@* 		</div> *@
@* *@
@* 		<IconButton Icon="keyboard_backspace" OnClick="@(() => SelectedItem = Guid.Empty)"/> *@
@* *@
@* 		@if (viewIndex > 0) *@
@* 		{ *@
@* 		    <div @onclick="@ChangeItemLeft" class="sideBtn" id="leftBtn"> *@
@* 		        <svg width="36px" height="36px" viewBox="0 0 24 24"><path d="M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"></path></svg> *@
@* 		    </div> *@
@* 		} *@
@* *@
@* 		@if (!MediaList[viewIndex].video) *@
@* 		{ *@
@* 		    <div tabindex="0" id="itemDiv"><img src="mm_library/@MediaList[viewIndex].path" alt=""/></div> *@
@* 		} *@
@* 		else *@
@* 		{ *@
@* 		    <div id="itemDiv"><video src="@(SelectedItem == Guid.Empty ? "" : Path.Combine("mm_library", MediaList[viewIndex].path))" loop autofocus controls autoplay></video></div> *@
@* 		} *@
@* *@
@* 		@if (MediaList.Count - 1 > viewIndex) *@
@* 		{ *@
@* 		    <div @onclick="@ChangeItemRight" class="sideBtn" id="rightBtn"> *@
@* 		        <svg width="36px" height="36px" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg> *@
@* 		    </div> *@
@* 		} *@
@* 	</div> *@
@*      *@
@* 	<div> *@
@* 		@for (int i = 0; i < MediaList.Count; i++) *@
@* 		{ *@
@* 			if (MediaList[i].dateTaken?.Year != previousYear) *@
@* 			{ *@
@* 				previousYear = MediaList[i].dateTaken!.Value.Year; *@
@* 				<span>@MediaList[i].dateTaken?.Year</span> *@
@* 				<div> *@
@* 					@{ *@
@* 						do *@
@* 						{ *@
@* 							int ii = i; *@
@* 							<div class="thumbnail" @onclick="@(() => { viewIndex = ii; SelectedItem = MediaList[ii].uuid; })"> *@
@* 								@if (MediaList[i].starred) { <MaterialIcon Icon="star" Class="star-icon"/> } *@
@* 								@if (MediaList[i].video) { <MaterialIcon Icon="play_circle_outline" Class="video-icon"/> } *@
@* 								<img src="data:image/jpg;base64,@MediaList[ii].thumbnail" alt="mm_library/@MediaList[ii].path" loading="lazy"/> *@
@* 							</div> *@
@* 							i++; *@
@* 						} while (i < MediaList.Count && MediaList[i].dateTaken?.Year == previousYear); *@
@* 						i--; *@
@* 					} *@
@* 				</div> *@
@* 			} *@
@* 		} *@
@* 	</div> *@
@* 	 *@
@* 	$1$Hotkeys exclusive to viewing a single item.#1# *@
@* 	if (SelectedItem != Guid.Empty) *@
@* 	{ *@
@* 		if (!MediaList[viewIndex].video) *@
@* 		{ *@
@* 			<KeyboardShortcuts Left="@ChangeItemLeft" Right="@ChangeItemRight"/> *@
@* 		} *@
@* *@
@* 		<KeyboardShortcuts AltLeft="@(() => SelectedItem = Guid.Empty)" CtrlLeft="@ChangeItemLeft" CtrlRight="@ChangeItemRight" *@
@* 			CtrlE="@dateEdit.Toggle" Esc="@(() => SelectedItem = Guid.Empty)" *@
@* 			I="@info.Toggle" AltF="@editFilename.Toggle"/> *@
@* 	} *@
@* 	 *@
@* 	<ShortcutsReference DelText="Delete Selected Item(s)" CtrlDText="Delete Selected Item(s)" CtrlGText="Go to a Specific Point in Your Library" AltCText="Show/Hide CollectionSelector" AltSText="Add/Remove Star to Selected Item(s)"/> *@
@* } *@
@* *@
@* @code { *@
@* 	private static readonly List<string> months = new(new[] {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}); *@
@* *@
@* 	private int maxDay, _selectedDay, previousYear; *@
@* 	private string _selectedMonth = null!; *@
@* 	private string SelectedMonth *@
@* 	{ *@
@* 		get => _selectedMonth; *@
@* 		set *@
@* 		{ *@
@* 			_selectedMonth = value; *@
@* *@
@* 			maxDay = value switch *@
@* 			{ *@
@* 				"April" or "June" or "September" or "November" => 30, *@
@* 				"February" => 29, *@
@* 				_ => 31 *@
@* 			}; *@
@* *@
@* 			//If switching from a month with more days than the new month, don't create invalid input like Feb 30, etc. *@
@* 			if (_selectedDay > maxDay) _selectedDay = maxDay; *@
@* *@
@* 			LoadMemories(); *@
@* 		} *@
@* 	} *@
@* *@
@* 	private int SelectedDay *@
@* 	{ *@
@* 		get => _selectedDay; *@
@* 		set *@
@* 		{ *@
@* 			if (value > maxDay) *@
@* 			{ *@
@* 				_selectedDay = 1; *@
@* 				int newIndex = months.IndexOf(SelectedMonth); *@
@* 				if (newIndex > 12) newIndex = 0; *@
@* 				else newIndex++; *@
@* 				SelectedMonth = months[newIndex]; *@
@* 			} *@
@* 			else if (value < 1) *@
@* 			{ *@
@* 				int newIndex = months.IndexOf(SelectedMonth); *@
@* 				if (newIndex < 0) newIndex = 11; *@
@* 				else newIndex--; *@
@* 				SelectedMonth = months[newIndex]; *@
@* 				_selectedDay = maxDay; *@
@* 			} *@
@* 			else _selectedDay = value; *@
@* *@
@* 			LoadMemories(); *@
@* 		} *@
@* 	} *@
@* *@
@* 	private List<MediaRow> MediaList = null!; *@
@* *@
@* 	//Stuff for viewing a single item. *@
@* 	///The index of the item user is currently viewing. *@
@* 	private int viewIndex; *@
@* *@
@* 	private DateTime? newDateTaken; *@
@* 	private readonly ElementVisibility editFilename = new(), filenameError = new(), dateEdit = new(), dtError = new(), info = new(); *@
@* 	private string? itemDescription; *@
@* 	private string newFilename = ""; *@
@* 	private List<Collection>? collectionsIn; *@
@* 	 *@
@* 	private Guid SelectedItem *@
@* 	{ *@
@* 		get => _selectedItem; *@
@* 		set *@
@* 		{ *@
@* 			_selectedItem = value; *@
@* 			if (value == Guid.Empty) *@
@* 			{ *@
@* 				newFilename = ""; *@
@* 				ElementVisibility.ChangeStates(false, editFilename, filenameError, dateEdit, dtError, info); *@
@* 			} *@
@* 			else *@
@* 			{ *@
@* 				newDateTaken = MediaList[viewIndex].dateTaken; *@
@* 				newFilename = Path.GetFileNameWithoutExtension(MediaList[viewIndex].path); *@
@* 				collectionsIn = C.GetCollectionsContaining(SelectedItem); *@
@* 				itemDescription = MediaList[viewIndex].description; *@
@* 			} *@
@* 			StateHasChanged(); *@
@* 		} *@
@* 	} *@
@* 	private Guid _selectedItem; *@
@* } *@
@* *@
@* @functions { *@
@* 	protected override void OnInitialized() *@
@*     { *@
@*         SelectedMonth = DateTime.Today.ToString("MMMM"); *@
@*         SelectedDay = DateTime.Today.Day; *@
@* 		info.Rerender = StateHasChanged; *@
@* 		 *@
@*         LoadMemories(); *@
@*     } *@
@* *@
@*     private void LoadMemories() *@
@*     { *@
@*         MediaList = C.LoadMemories(SelectedMonth, SelectedDay).OrderByDescending(m => m.dateTaken).ToList(); *@
@*         previousYear = 0; *@
@*     } *@
@* } *@
@* *@
@* $1$ Functions only for viewing a single item. #1# *@
@* @functions { *@
@* 	private void DeleteBtnClick() *@
@* 	{ *@
@* 		if (SelectedItem != Guid.Empty) *@
@* 		{ *@
@* 			SelectedItem = MediaList.Count > 0 ? MediaList[viewIndex].uuid : Guid.Empty; *@
@* 			C.MoveToTrash(SelectedItem); *@
@* 			MediaList.RemoveAt(viewIndex); *@
@* 		} *@
@* 	} *@
@* *@
@* 	private void StarBtnClick() *@
@* 	{ *@
@* 		if (SelectedItem != Guid.Empty) *@
@* 		{ *@
@* 			C.UpdateStarred(SelectedItem, !MediaList[viewIndex].starred); *@
@* 			MediaList[viewIndex].starred = !MediaList[viewIndex].starred; *@
@* 			StateHasChanged(); *@
@* 		} *@
@* 	} *@
@* 	 *@
@* 	private void UpdateDateTaken() *@
@* 	{ *@
@* 		if (C.UpdateDateTaken(MediaList[viewIndex].path, newDateTaken)) *@
@* 		{ *@
@* 			dateEdit.Disable(); *@
@* 			MediaList[viewIndex].dateTaken = newDateTaken; *@
@* 		} *@
@* 		else *@
@* 		{ *@
@* 			dtError.Enable(); *@
@* 		} *@
@* 	} *@
@* 	 *@
@* 	///Called when description textarea's focus is lost. Updates the item's description, if it's been updated. *@
@* 	private void UpdateDescription() *@
@* 	{ *@
@* 		if (MediaList[viewIndex].description != itemDescription) *@
@* 		{ *@
@* 			MediaList[viewIndex].description = itemDescription; *@
@* 			C.UpdateDescription(_selectedItem, itemDescription); *@
@* 		} *@
@* 	} *@
@* *@
@* 	private void RenameFile() *@
@* 	{ *@
@* 		GC.Collect(); //Those damn videos always stirring up trouble. *@
@* 		GC.WaitForPendingFinalizers(); *@
@* 		string? result = C.RenameFile(MediaList[viewIndex].path, newFilename, Path.GetExtension(MediaList[viewIndex].path), MediaList[viewIndex].dateTaken); *@
@* 		if (result == null) *@
@* 		{ *@
@* 			filenameError.Enable(); *@
@* 		} *@
@* 		else *@
@* 		{ *@
@* 			editFilename.Disable(); *@
@* 			MediaList[viewIndex].path = result; *@
@* 		} *@
@* 	} *@
@* *@
@* 	private void ChangeItemLeft() *@
@* 	{ *@
@* 		if (viewIndex == 0) return; *@
@* 		viewIndex--;  *@
@* 		SelectedItem = MediaList[viewIndex].uuid; *@
@* 	} *@
@* *@
@* 	private void ChangeItemRight() *@
@* 	{ *@
@* 		if (viewIndex == MediaList.Count - 1) return; *@
@* 		viewIndex++; *@
@* 		SelectedItem = MediaList[viewIndex].uuid; *@
@* 	} *@
@* *@
@* 	private void PickRandomDate() *@
@* 	{ *@
@* 		SelectedMonth = months[Random.Shared.Next(months.Count)]; *@
@* 		SelectedDay = Random.Shared.Next(32); *@
@* 	} *@
@* } *@